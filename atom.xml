<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CSRJTAN]]></title>
  <subtitle><![CDATA[Keep Moving]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://csrjtan.github.io/"/>
  <updated>2016-04-13T07:46:56.000Z</updated>
  <id>https://csrjtan.github.io/</id>
  
  <author>
    <name><![CDATA[CsrjTan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[leetcode3-6]]></title>
    <link href="https://csrjtan.github.io/2016/04/13/leetcode3-6/"/>
    <id>https://csrjtan.github.io/2016/04/13/leetcode3-6/</id>
    <published>2016-04-13T06:55:42.000Z</published>
    <updated>2016-04-13T07:46:56.000Z</updated>
    <content type="html"><![CDATA[<h4 id="LeetCode_3"><a href="#LeetCode_3" class="headerlink" title="LeetCode 3"></a>LeetCode 3</h4><p>Ques: Find the length of longest substring without repeating characters.</p>
<p>思路：用table记录出现char字符的次数，256个ASCII字符初始化为-1.如果遇到重复，则记录在table里面，</p>
<p>我的代码:<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> lengthOfLongestSubstring(<span class="type">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> tables[<span class="number">256</span>];</span><br><span class="line">        fill(tables,tables+<span class="number">256</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="literal">result</span>=<span class="number">0</span>,lastRepeatedPos=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            //当找到重复元素且lastRepeatedPos小于找到重复元素的下表时，更新lastRepeatedPos</span><br><span class="line">            <span class="keyword">if</span>(tables[s[i]]!=-<span class="number">1</span>&amp;&amp;lastRepeatedPos&lt;tables[s[i]])</span><br><span class="line">                lastRepeatedPos=tables[s[i]];</span><br><span class="line">                </span><br><span class="line">            //更新最大值</span><br><span class="line">            <span class="literal">result</span>=max(<span class="literal">result</span>,i-lastRepeatedPos);</span><br><span class="line">            //元素插入表中</span><br><span class="line">            tables[s[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>官方解题：<br><a href="https://leetcode.com/articles/longest-substring-without-repeating-characters/" target="_blank" rel="external">LeetCode 3 Solution</a></p>
<h5 id="AP_1"><a href="#AP_1" class="headerlink" title="AP 1"></a>AP 1</h5><p>暴力破解，但超时了,TC = O(N^3),对于字符串中的每个子串都去扫，是否子串为独立的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JAVA VERSION</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">allUnique</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">            Character ch = s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">set</span>.contains(ch)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">set</span>.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="AP_2"><a href="#AP_2" class="headerlink" title="AP 2"></a>AP 2</h5><p>基于上述，我们重复扫了很多子串，假设固定开始位置一个个扫的话，可以减少重复扫串的运算。这样可以使TC = O(N^2),LEFT-CLOSED AND RIGHT OPEN</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SLIDING WINDOW </span></span><br><span class="line"><span class="comment">// JAVA VERSION</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">set</span>.contains(s.charAt(j)))&#123;</span><br><span class="line">                <span class="built_in">set</span>.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">set</span>.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="AP_3"><a href="#AP_3" class="headerlink" title="AP 3"></a>AP 3</h5><p>SLDING WINDOW OPTIMIZED, TC=N = O(N)，SC=m=O(1). m为charset大小<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">       Map&lt;Character, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// current index of character</span></span><br><span class="line">       <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">map</span>.containsKey(s.charAt(j))) &#123;</span><br><span class="line">               i = Math.max(<span class="built_in">map</span>.get(s.charAt(j)), i);</span><br><span class="line">           &#125;</span><br><span class="line">           ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">           <span class="built_in">map</span>.put(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="LEETCODE_4"><a href="#LEETCODE_4" class="headerlink" title="LEETCODE 4"></a>LEETCODE 4</h4><p>QUES: 找两个有序数组中的中位数<br>解法：1.暴力地将两个数组合并然后排序，直接得到中位数<br>     2.求得数组大小，用堆排的合并方法，找到中位数。 复杂度O(log(m+n))</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// My Code</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l1 = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> l2 = nums2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1;i++)</span><br><span class="line">            res.push_back(nums1[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2;i++)</span><br><span class="line">            res.push_back(nums2[i]);</span><br><span class="line">        sort(res.begin(),res.end());</span><br><span class="line">        <span class="keyword">if</span>(res.size()%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)(res[(l1+l2-<span class="number">1</span>)&gt;&gt;<span class="number">1</span>]+res[(l1+l2 &gt;&gt;<span class="number">1</span>)])/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)(res[(l1+l2)&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="LEETCODE_5"><a href="#LEETCODE_5" class="headerlink" title="LEETCODE 5"></a>LEETCODE 5</h4><p>问题： 给一个串S,找出其中最长的回文子串</p>
<p>官方使用DP的方法以及EXPAND AROUNG CENTER，其中我的代码就是EXPAND AROUND CENTER。还有一个Manacher’s Algorithm,它通过在字母间加#和以$作为起始符，使得串不再分为奇偶的情况，有效地统一起来，核心思想还是基于中央字母的展开策略。<br><img src="https://leetcode.com/articles/longest-palindromic-substring/" alt="官方解法"></p>
<p>我的解法：分为奇偶情况判断，遍历串，寻找以该字符为中心，两边的回文串最大长度，把最长的情况的信息保留，然后返回。TC=O(N^2)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">int</span> subTempLength=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> subMax=<span class="number">0</span>,subMaxIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span> ; i&lt; len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Odd</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;(i-j)&gt;=<span class="number">0</span>&amp;&amp;(i+j)&lt;len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i-j]!=s[i+j])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                subTempLength = j*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(subTempLength &gt; subMax)</span><br><span class="line">            &#123;</span><br><span class="line">                subMax = subTempLength;</span><br><span class="line">                subMaxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Even</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;(i-j)&gt;=<span class="number">0</span>&amp;&amp;(i+j+<span class="number">1</span>)&lt;len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i-j]!=s[i+j+<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                subTempLength = j*<span class="number">2</span> +<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(subTempLength &gt; subMax)</span><br><span class="line">            &#123;</span><br><span class="line">                subMax = subTempLength;</span><br><span class="line">                subMaxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> startIndex ;</span><br><span class="line">        <span class="keyword">if</span>(subMax % <span class="number">2</span> ==<span class="number">0</span>)</span><br><span class="line">            startIndex= subMaxIndex - subMax/<span class="number">2</span> +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            startIndex = subMaxIndex - subMax/<span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(s,startIndex,subMax)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="LEETCODE_6"><a href="#LEETCODE_6" class="headerlink" title="LEETCODE 6"></a>LEETCODE 6</h4><p>问题：ZigZag Conversion<br>一开始没看懂，将串转化成蛇形，然后输出，有点点加密的味道<br>思路：关键理解到蛇形转化的过渡的字母是怎么在数组表示即可<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//My Code</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> nRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>||nRows &lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(nRows ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="comment">//蛇形过渡的位置和行的关系</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">2</span> * nRows - <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//逐行输出蛇形字符</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nRows;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">//根据原长转换</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j+=size)</span><br><span class="line">            &#123;	<span class="comment">//输出竖直的字符</span></span><br><span class="line">                res+=s[j];</span><br><span class="line">                <span class="comment">//输出斜形的字符</span></span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>&amp;&amp;i!=nRows-<span class="number">1</span>&amp;&amp; j+size-<span class="number">2</span>*i&lt;s.length())</span><br><span class="line">                    res+=s[j+size-<span class="number">2</span>*i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="LeetCode_3"><a href="#LeetCode_3" class="headerlink" title="LeetCode 3"></a>LeetCode 3</h4><p>Ques: Find the length of longest subst]]>
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode3~14]]></title>
    <link href="https://csrjtan.github.io/2016/04/13/leetcode3-14/"/>
    <id>https://csrjtan.github.io/2016/04/13/leetcode3-14/</id>
    <published>2016-04-13T06:55:42.000Z</published>
    <updated>2016-04-13T07:06:10.000Z</updated>
    <content type="html"><![CDATA[<p>### </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>### </p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode2&3]]></title>
    <link href="https://csrjtan.github.io/2016/03/07/leetcode2/"/>
    <id>https://csrjtan.github.io/2016/03/07/leetcode2/</id>
    <published>2016-03-07T05:59:56.000Z</published>
    <updated>2016-03-07T06:41:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="leetcode2_3AAdd_Two_Numbers"><a href="#leetcode2_3AAdd_Two_Numbers" class="headerlink" title="leetcode2:Add Two Numbers"></a>leetcode2:Add Two Numbers</h3><p>I:(2-&gt;4-&gt;3)+(5-&gt;6-&gt;4)<br>O:(7-&gt;0-&gt;8)<br>原则：有进位往后增加，无则扩展<br><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> *next;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(<span class="type">NULL</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">ListNode</span>* addTwoNumbers(<span class="type">ListNode</span>* l1, <span class="type">ListNode</span>* l2) &#123;</span><br><span class="line">        <span class="type">ListNode</span> dummy(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span>* p = &amp;dummy;</span><br><span class="line">        <span class="built_in">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1||l2)&#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">val</span> = cn+(l1?l1-&gt;<span class="keyword">val</span>:<span class="number">0</span>)+(l2?l2-&gt;<span class="keyword">val</span>:<span class="number">0</span>);</span><br><span class="line">            cn = <span class="keyword">val</span>/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">val</span> = <span class="keyword">val</span>%<span class="number">10</span>;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="keyword">val</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l1)</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2)</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cn!=<span class="number">0</span>)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="type">ListNode</span>(cn);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="leetcode3_3ALongest_Substring_Without_Repeating_Characters"><a href="#leetcode3_3ALongest_Substring_Without_Repeating_Characters" class="headerlink" title="leetcode3:Longest Substring Without Repeating Characters"></a>leetcode3:Longest Substring Without Repeating Characters</h3><p>问题：寻找最大不重复字母的子串长度<br>解法：1.从每个元素找起始无重复字符串，时间复杂度为O(n^3)<br>      2.将没出现的字母放入set，当重复字母出现时，把已有之前的set的字母移除，并记录最长的子串长度<br>      3.用数组不用Map,直接定义一个变量来保存无重复字符串的第一个字符的下标，碰到重复的就更新下标</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> lengthOfLongestSubstring(<span class="type">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> tables[<span class="number">256</span>];</span><br><span class="line">        fill(tables,tables+<span class="number">256</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="literal">result</span>=<span class="number">0</span>,lastRepeatedPos=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            //当找到重复元素且lastRepeatedPos小于找到重复元素的下表时，更新lastRepeatedPos</span><br><span class="line">            <span class="keyword">if</span>(tables[s[i]]!=-<span class="number">1</span>&amp;&amp;lastRepeatedPos&lt;tables[s[i]])</span><br><span class="line">                lastRepeatedPos=tables[s[i]];</span><br><span class="line">                </span><br><span class="line">            //更新最大值</span><br><span class="line">            <span class="literal">result</span>=max(<span class="literal">result</span>,i-lastRepeatedPos);</span><br><span class="line">            //元素插入表中</span><br><span class="line">            tables[s[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>总结：对于一个字符串，如果未出现重复，则该值放入数组中，由于ASCII最多有256种符号，则放入一个大小为256的数组里；如果出现重复的字母，即不为默认的-1，且第一个字符下标比这个重复字母下标小，则更新下标以及最长长度，并将该长度放入对应符号的数组值里。</p>
<h4 id="std_3A_3Afill_u7528_u6CD5"><a href="#std_3A_3Afill_u7528_u6CD5" class="headerlink" title="std::fill用法"></a>std::fill用法</h4><p>void fill(first,last,val);<br>fill(array,array+n,element);</p>
<p>memset(array,array+n,element);</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="leetcode2_3AAdd_Two_Numbers"><a href="#leetcode2_3AAdd_Two_Numbers" class="headerlink" title="leetcode2:Add Two Numbers"></a>leetcod]]>
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[paper-reading-20160306]]></title>
    <link href="https://csrjtan.github.io/2016/03/06/paper-reading-20160306/"/>
    <id>https://csrjtan.github.io/2016/03/06/paper-reading-20160306/</id>
    <published>2016-03-06T05:34:57.000Z</published>
    <updated>2016-03-06T06:13:32.000Z</updated>
    <content type="html"><![CDATA[<p>之前阅读了左老师的两个paper,一直没有给总结，今天来赶紧写一下</p>
<h3 id="u300AOn_kernel_difference-weighted_k-nearest_neighbor_classification_u300B"><a href="#u300AOn_kernel_difference-weighted_k-nearest_neighbor_classification_u300B" class="headerlink" title="《On kernel difference-weighted k-nearest neighbor classification》"></a>《On kernel difference-weighted k-nearest neighbor classification》</h3><p>KNN的改进方法，利用临近点的差距作为权值的学习策略。将权值的学习转化成约束优化的问题，从优化数学的角度论证了易求解和适应高斯噪声以及扩展为kernel version，实验部分k,n以及theta是prefix然后相互学习下降求解的。<br>Contribution:<br>1.提出difference-weighted,转化成约束优化Model<br>2.证明了理论性以及适应于非线性数据集，kernel<br>3.得到实验结果比一些state-of-art的NN要好</p>
<h4 id="u6458_u8981"><a href="#u6458_u8981" class="headerlink" title="摘要"></a>摘要</h4><p>NN是一个简单有效的模式识别聚类方法,这个论文提出了Kernel difference-weighted的KDF-KNN方法，用difference-weighted作为计算聚类距离时的权值，将一般的权值求解编程带约束的优化问题，并基于此理论Kernel化，最后验证数学理论和算法复杂度</p>
<h4 id="u95EE_u9898_u5EFA_u6A21"><a href="#u95EE_u9898_u5EFA_u6A21" class="headerlink" title="问题建模"></a>问题建模</h4><p>将最近邻的权值设置为 $W = argmin\frac{1}{2}||x-w^TX||^2 $ , $s.t. \sum_i^w w_i =1 $ , x为样本与相邻的欧几距离，w为当前权值。w是最终关于该数据集模型的最优权值，所以接下来的DW-KNN就是求解上述方程的约束最优化问题了</p>
<p>接下来使用凸优化和朗格朗日的方法求解,接下来做了关于高斯噪声的优化以及Kernel提升以适应非线性数据集，还理论分析对比了该方法与其他方法的复杂度</p>
<h4 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h4><p>该方法计算使用x与邻近的不同作为权值来计算，而非简单的距离。将该问题有效转化成约束优化问题，从理论上证明该方法的理论有效性并从实验验证了该算法的有效性。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/KDW-KNN.png" alt="Difference-Weighted"> </p>
<h3 id="u300AOn_accurate_orientation_extraction_and_appropriate_distance_measure_for_low-resolution_palmprint_recognition_u300B"><a href="#u300AOn_accurate_orientation_extraction_and_appropriate_distance_measure_for_low-resolution_palmprint_recognition_u300B" class="headerlink" title="《On accurate orientation extraction and appropriate distance measure for low-resolution palmprint recognition》"></a>《On accurate orientation extraction and appropriate distance measure for low-resolution palmprint recognition》</h3><p>左老师在理大生物识别实验室的掌纹识别工作</p>
<p>1.掌纹识别的背景<br>2.两个问题：低分辨下，feature和distance measure<br>3.提出orientation feature<br>4.提出General angular distance的框架</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前阅读了左老师的两个paper,一直没有给总结，今天来赶紧写一下</p>
<h3 id="u300AOn_kernel_difference-weighted_k-nearest_neighbor_classification_u300B"><a href="#u300A]]>
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Summary_Of_Half_Year]]></title>
    <link href="https://csrjtan.github.io/2016/02/29/Summary-Of-Half-Year/"/>
    <id>https://csrjtan.github.io/2016/02/29/Summary-Of-Half-Year/</id>
    <published>2016-02-29T03:10:23.000Z</published>
    <updated>2016-02-29T03:33:30.000Z</updated>
    <content type="html"><![CDATA[<p>总结进入理大半年来的学习，以及关于SLAM和无人机室内定位飞行项目的学习</p>
<p>这个项目比想象中大，里面需要学习和解决的问题都很多，一下子都无从下手，复杂度也高，以下写一下OnBoard<br>AutoNavigation and Obstacle Avoidance的问题和见解</p>
<h3 id="u5173_u4E8EDJI_u7684_u5F00_u53D1_u5957_u4EF6"><a href="#u5173_u4E8EDJI_u7684_u5F00_u53D1_u5957_u4EF6" class="headerlink" title="关于DJI的开发套件"></a>关于DJI的开发套件</h3><p>首先用的是GUIDACNE和Matrix100以及树莓派pi2，对于完全没有硬件概念的我，接触到单片机真是头疼，硬件和软件是完全的两码事。Guidance是个多源的视觉素材采集设备，多方位的双目超声以及IMU模块，可以提取出大量有用的环境信息，加工进而智能优化使用。而M100是通过对应的命令传输指令进行控制的，这里的信号对于传输频率有一些注意，比如波段这些都是比较基础底层的东西。最头疼的是遇到这些套件的学习使用不方便，M100也不适应室内的飞行，指南针校准。曾经遇到指南针损坏需要焊接电路，遇到IMU侧准不稳导致起飞折断螺旋桨，遇到系统不兼容树莓派的移植问题，遇到SLAM精度不够无法恢复的问题，也在一步一个脚印不断尝试去解决，便知道除了编程，还有很多很多的问题是复杂而难解决的，如何解决或者如何避开问题都是能力的体现</p>
<h3 id="u5173_u4E8EOnBoard_System"><a href="#u5173_u4E8EOnBoard_System" class="headerlink" title="关于OnBoard System"></a>关于OnBoard System</h3><p>至此，整个system已经很大，感觉需要公司提供解决方案了，已经不是一个人hold住了，所以把Vision<br>System里面的SLAM部分抽出来学习，希望能从中挖出一些点子，看了RGBD<br>SLAM以及里面的一些核心问题，跟很多国内的研究者去讨论，看英文材料，包括那本Multi-View的经典，还有很多工具框架和素材库，POINT<br>CLOUD LIBRARY, OPENCV,<br>ROS.进而发现，每一个点都是很大，都不好挖。结果整个人的心态就不行了，发现自己在做一个不能完成的任务的感觉，应该果断将问题抛出，让大家一起有效来解决。另外还是希望可以有学习的对象，有讨论的人，有相关一起工作的伙伴是一件很值得珍惜的事情。</p>
<h3 id="u6781_u7B80_u7684_u751F_u6D3B"><a href="#u6781_u7B80_u7684_u751F_u6D3B" class="headerlink" title="极简的生活"></a>极简的生活</h3><p>最后，总结一下失败的经验和收获的东西。很感谢处在一个自由向上的科研环境里，感觉自己值得学习的东西还是很多很多，但希望自己能真正定下心来挖掘。了解和知道自己所想所要的，开启一个极简的生活状态，发现自己很懒，记忆也不好。每天需要提醒自己，鸡汤喝完就忘，只有习惯才是永存的好东西，以及自己的能力和素质。保持良好的工作态度和心态，然后坚持去做值得自己去做的事情，包括锻炼、看书和音乐，想要去做的东西就尽力去做，不要计较得失，不要在乎难度，一点一点安排计划就不是问题了。整理掉不要看到的东西，不然影响自己，了解真正需要的并保留下来，不要再去学习相似而没有意义是事情。接下来就开启新的生活吧，整理关于SLAM的东西，爱CV看多光谱，学习ML,PR！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总结进入理大半年来的学习，以及关于SLAM和无人机室内定位飞行项目的学习</p>
<p>这个项目比想象中大，里面需要学习和解决的问题都很多，一下子都无从下手，复杂度也高，以下写一下OnBoard<br>AutoNavigation and Obstacle Avoidanc]]>
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode26 & 242 & String]]></title>
    <link href="https://csrjtan.github.io/2016/02/26/leetcode26/"/>
    <id>https://csrjtan.github.io/2016/02/26/leetcode26/</id>
    <published>2016-02-26T09:39:19.000Z</published>
    <updated>2016-04-13T07:10:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="leetcode_26"><a href="#leetcode_26" class="headerlink" title="leetcode 26"></a>leetcode 26</h3><p>Remove Duplicates from Sorted Array<br>思路：去除有序数组中的重复点，返回新数组长度，前n个就是新数组。难点是不能用额外空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(i==<span class="number">0</span>||nums[i]!=nums[i-<span class="number">1</span>])</span><br><span class="line">           &#123;</span><br><span class="line">               nums[count] = nums[i];</span><br><span class="line">               count++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>解题：重新填入整个数组，如果是0或者与前一个值不一样，就直接填入覆盖，直到遍历完整个有序数组。<br>TC = O(n), SC = O(1)</p>
<p>今天还完成了<a href="http://pan.baidu.com/s/1o7o6xYy" target="_blank" rel="external">Thesis Writting<br>Collacation</a> 密码：8qjh</p>
<p>以及<a href="http://pan.baidu.com/s/1i4t00SX" target="_blank" rel="external">DJI PPT</a> 密码：awzd</p>
<h3 id="leetcode_242_Valid_Anagram"><a href="#leetcode_242_Valid_Anagram" class="headerlink" title="leetcode 242 Valid Anagram"></a>leetcode 242 Valid Anagram</h3><p>题目：判断两个字符串是否为同字母异序<br>思路：1.将字符串转成数组，排序然后比对得到结果<br>      2.计算两个字符串里面的字母的Occurence，用一个26大小的counter数组统计字母出现的次数，当第一个串出现就++，第二个出现就–；最后得到的counter如果全为0，则符合；否则不符合。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; counter;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           counter.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            counter[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">            counter[t[i] - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(counter[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>3.或者先对第一个串加完，然后第二个串减counter,如果其中一个元素小于0，则不符合。不能说一定等于0，因为后面可能会继续减的。</p>
<h3 id="c++_string_u7528_u6CD5"><a href="#c++_string_u7528_u6CD5" class="headerlink" title="c++ string用法"></a>c++ string用法</h3><p>1.头文件 #include <string><br>2.构造 string(const char <em>s) //c string initialize<br>       string(int n,char c)<br>       string s = “hello”;<br>3.字符操作  const char &amp;operator<a href="/int n"></a> const<br>        int copy(char </em>s,int n, int pos=2) const;<br>4.特性  int length() const;<br>        bool empty() const;<br>       void resize(int len,char c); //不足部分用c填充<br>5.赋值  = , assign(const char <em>c)<br>6.连接  +=, string append(const string&amp;s);<br>7.比较 ==， int compare(const string &amp;s);<br>8.子串  string substr(int pos=0,int n=npos) const;<br>9.交换  void swap(string &amp;s2);<br>10.查找函数 int find(char c,int pos=0) const; //从pos开始找c<br>       int find(const string &amp;s,int pos=0) const; //从pos找s<br>11.替换  string &amp;replace(int p0,int n0,const char
</em>s);//删除p0开始n0个字符，在p0后插入串s<br>12.插入删除 insert erase</string></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="leetcode_26"><a href="#leetcode_26" class="headerlink" title="leetcode 26"></a>leetcode 26</h3><p>Remove Duplicates from Sorted Arra]]>
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode1 with Vecotr and Map]]></title>
    <link href="https://csrjtan.github.io/2016/02/26/leetcode1/"/>
    <id>https://csrjtan.github.io/2016/02/26/leetcode1/</id>
    <published>2016-02-26T06:08:03.000Z</published>
    <updated>2016-04-13T07:06:07.000Z</updated>
    <content type="html"><![CDATA[<p>In order to practise the c++ coding ability and have a prepare for the<br>work interview for the future.I start to do the leetcode in the<br>leisure time.Before that I introduce a code comparing tools: <strong>Beyond<br>Compare </strong></p>
<h3 id="Beyond_Compare"><a href="#Beyond_Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p><a href="http://www.scootersoftware.com/index.php" target="_blank" rel="external">Home Page</a><br>It is a tool for folder and file comparing, which useful for coding<br>compare as well. For now, it provides all the OS version including<br>WINDOWS, LINUX and MAC.</p>
<h3 id="LeetCode1_Two_Sum"><a href="#LeetCode1_Two_Sum" class="headerlink" title="LeetCode1 Two Sum"></a>LeetCode1 Two Sum</h3><p><strong>Ques</strong>:Given an array of integers, return indices of the two numbers such<br>that they add up to a specific target.<br>You may assume that each input would have exactly one solution.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure></p>
<h4 id="Solution1_3A_Sort_and_Search"><a href="#Solution1_3A_Sort_and_Search" class="headerlink" title="Solution1: Sort and Search"></a>Solution1: Sort and Search</h4><p>先排序，从开头和结尾向中间找，复杂度O(nlogn)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义Node来重新装数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> id,val;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">// 定义Node比较大小的原则，让sort从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> Node &amp; a,<span class="keyword">const</span> Node &amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 初始化Nodes列表</span></span><br><span class="line">        Node nodes[numbers.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers.size(); i++)&#123;</span><br><span class="line">            nodes[i].id = i+<span class="number">1</span>;</span><br><span class="line">            nodes[i].val = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序后，有序地检索</span></span><br><span class="line">        sort(nodes, nodes+numbers.size(), compare);</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>,end=numbers.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="comment">// 从两端往中间去搜索</span></span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="comment">// 找到后，按序输出</span></span><br><span class="line">            <span class="keyword">if</span>(nodes[start].val + nodes[end].val == target)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nodes[start].id &gt; nodes[end].id)</span><br><span class="line">                    swap(nodes[start].id , nodes[end].id);</span><br><span class="line">                ans.push_back(nodes[start].id);</span><br><span class="line">                ans.push_back(nodes[end].id);</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="comment">// 过小:start++; 过大:end--</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( nodes[start].val + nodes[end].val &lt; target )&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="Solution2_3A__u5229_u7528map-find"><a href="#Solution2_3A__u5229_u7528map-find" class="headerlink" title="Solution2: 利用map.find"></a>Solution2: 利用map.find</h4><p>将数存入hash_map中，查找target-numbers[i],有即返回。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> length = numbers.size();</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> find;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; length; ++i)&#123;</span><br><span class="line">        find = mp[target-numbers[i]];</span><br><span class="line">        <span class="comment">// 默认没的时候，初始化map,直到新加数据找到以往符合的值</span></span><br><span class="line">        <span class="keyword">if</span>(find)&#123;</span><br><span class="line">            res.push_back(find);</span><br><span class="line">            res.push_back(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[numbers[i]] = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总体而言，第二种方法假定了只有一种结果，先判断找到没，再初始化map。这样可以确保找到的索引值是在前的，在新插的数据索引是在后的。十分的巧妙在一边在检索结果一边初始化map的数据。</p>
<p>参考链接: <a href="http://www.acmerblog.com/leetcode-two-sum-5223.html" target="_blank" rel="external">acm之家</a></p>
<h3 id="c++_Vector_u7528_u6CD5"><a href="#c++_Vector_u7528_u6CD5" class="headerlink" title="c++ Vector用法"></a>c++ Vector用法</h3><p>1.头文件 #include <vector><br>2.变量声明 vector<int> a;  二维数组： vector<int*> a2;<br>3.具体用法<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="tag">a</span>.<span class="function"><span class="title">push_back</span><span class="params">(int)</span></span>     <span class="function"><span class="title">pop_back</span><span class="params">()</span></span>    <span class="function"><span class="title">begin</span><span class="params">()</span></span>  <span class="function"><span class="title">end</span><span class="params">()</span></span>  <span class="function"><span class="title">max_size</span><span class="params">()</span></span> <span class="function"><span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="tag">a</span>.<span class="function"><span class="title">at</span><span class="params">(<span class="number">5</span>)</span></span> <span class="tag">a</span>[<span class="number">5</span>]  <span class="function"><span class="title">if</span><span class="params">(a.empty()</span></span>)   <span class="function"><span class="title">clear</span><span class="params">()</span></span>  <span class="tag">a</span>.<span class="function"><span class="title">insert</span><span class="params">(pos,elem)</span></span></span><br></pre></td></tr></table></figure></int*></int></vector></p>
<p>4.自定义排序<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a,<span class="keyword">const</span> <span class="keyword">int</span>&amp;b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line">调用sort(vec.begin(),vec.end(),comp);</span><br></pre></td></tr></table></figure></p>
<p>5.Vector使用分析<br>一般不够大小会自动resize扩大两倍的容量，所以如果装入1000个元素，会自动重新分配10次，2^10.但如果用reserve(1000)的话，可以有效避免重新分配的消耗。<br>另外可以用swap来有效利用vector剩余的空间等。</p>
<p>参考链接： <a href="http://blog.csdn.net/hancunai0017/article/details/7032383" target="_blank" rel="external">vecotr用法详解</a></p>
<h3 id="c++_map_u7684_u7528_u6CD5"><a href="#c++_map_u7684_u7528_u6CD5" class="headerlink" title="c++ map的用法"></a>c++ map的用法</h3><p>STL中一对一的数据结构，第一个成为关键字，只能出现一次，第二个是其值。Key-Value<br>其内建组织是一颗红黑树（非严格定义的平衡二叉树），可以对数据自动排序。<br>1.头文件 #include <map><br>2.声明  Map<int,string> mapStudent<br>3.数据插入<br>  3.1 mapStudent.insert(pair<int,string>(1,”stu_1”));<br>  3.2 mapStudent.insert(map<int,string>::value_type(2,”stu_2”));<br>  3.3 mapStudent[3] = “stu_3”;<br>  前两种一样，如果key已存在则插入失败；数组的方式是可以覆盖已有key-value的<br>4.如何检查插入成功<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span>&lt;<span class="type">int</span>,<span class="type">string</span>&gt; mapStudent;</span><br><span class="line"><span class="type">Pair</span>&lt;map&lt;<span class="type">int</span>,<span class="type">string</span>&gt;::<span class="keyword">iterator</span>,<span class="type">bool</span>&gt; <span class="type">Insert_Pair</span>;</span><br><span class="line"><span class="type">Insert_Pair</span> = mapStudent.insert(pair&lt;<span class="type">int</span>,<span class="type">string</span>&gt;(<span class="number">1</span>,<span class="string">"stu_1"</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="type">Insert_Pair</span>.second==<span class="literal">true</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">"Insert Suceess!"</span>;</span><br></pre></td></tr></table></figure></int,string></int,string></int,string></map></p>
<p>所以我们知道map.insert返回的属性是pair(iterator,bool)<br>5.size()，数据遍历<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示一下反向迭代器</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::reverse_iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mapStudent.rbegin();iter!=mapStudent.rend();iter++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;iter-&gt;second&lt;&lt;end;</span><br></pre></td></tr></table></figure></p>
<p>6.数据查找<br> 6.1 count判断关键字是否出现，是1，否0.<br> 6.2 find,返回一个迭代器，没有则返回end函数迭代器<br> 6.3<br>7.判空empty()和清空clear()<br>以及其他swap,key_comp,value_comp,get_allocator等函数<br>8.数据删除<br>  map.erase(iter) map.erase(key)<br>  map.erase(begin(),end()) //成片删除，前开后闭<br>9.如果key上用自己的结构体，需要重载小于号&lt;,不然无法遍历iterator</p>
<p>参考链接: <a href="http://blog.csdn.net/bat603/article/details/1456141" target="_blank" rel="external">STL中map的用法详解</a></p>
<h3 id="u5B98_u65B9_u7ED9_u51FA_u89E3_u6CD5"><a href="#u5B98_u65B9_u7ED9_u51FA_u89E3_u6CD5" class="headerlink" title="官方给出解法"></a>官方给出解法</h3><h4 id="AP_1"><a href="#AP_1" class="headerlink" title="AP 1"></a>AP 1</h4><p>Brute Force 暴力破解,复杂度为 TC=O(N^2),SC=O(1)<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] == <span class="keyword">target</span> - nums[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="AP_2"><a href="#AP_2" class="headerlink" title="AP 2"></a>AP 2</h4><p>利用Hash Table，遍历两次,复杂度 TC=O(N),SC=O(1)<br>将元素插入hash_map中，直接使用map.containsKey寻找映射值匹配<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="built_in">map</span>.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.containsKey(complement) &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(complement) != i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; i, <span class="built_in">map</span>.<span class="built_in">get</span>(complement) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="AP_3"><a href="#AP_3" class="headerlink" title="AP 3"></a>AP 3</h4><p>用Hash Table进一步优化，一边插入一边求解，达到一次遍历</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] twoSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="built_in">map</span>.<span class="built_in">get</span>(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In order to practise the c++ coding ability and have a prepare for the<br>work interview for the future.I start to do the leetcode in the]]>
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim Manual学习]]></title>
    <link href="https://csrjtan.github.io/2016/02/18/Manual%E5%AD%A6%E4%B9%A0/"/>
    <id>https://csrjtan.github.io/2016/02/18/Manual学习/</id>
    <published>2016-02-18T08:48:13.000Z</published>
    <updated>2016-02-19T11:56:58.000Z</updated>
    <content type="html"><![CDATA[<p>The meaning of life is challenging yourself constantly.<br>在工具上磨刀耗费了不少的时间，是时候提升个人能力和领域知识，积累和效率同样重要。</p>
<h3 id="u4ECESublime_u8F6C_u7528VIM_u4F5C_u4E3A_u7F16_u8F91_u5668"><a href="#u4ECESublime_u8F6C_u7528VIM_u4F5C_u4E3A_u7F16_u8F91_u5668" class="headerlink" title="从Sublime转用VIM作为编辑器"></a>从Sublime转用VIM作为编辑器</h3><p>放弃Sublime的原因主要有三：1.最主要的原因，从事无人机开发，在单片机上没有图形界面一说，所以Sublime也无法使用，通常使用ssh进行远端控制和开发，而且使用VIM有助于远距离开发，只从命令行便完成一切控制任务 2.真正解放鼠标，而且具有完备的教程和社区，相信如果一生与编程为伴的我会感谢现在的我所作出的决定 3.真正意义上从习惯以及Linux使用者的角度去理解Linux，可以加深和了解很多关于Shell的用法，以及约定俗成的用户习惯</p>
<h3 id="VIM_u7684_u5FEB_u6377_u952E_u56FE"><a href="#VIM_u7684_u5FEB_u6377_u952E_u56FE" class="headerlink" title="VIM的快捷键图"></a>VIM的快捷键图</h3><p>这里放上VIM的经典快捷键图，感谢博主原文链接<a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/" target="_blank" rel="external">CENALULU</a><br>附带一个清晰的快捷键链接<a href="http://vim.rtorr.com/" target="_blank" rel="external">站点</a><br>经典版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/classic.gif" alt="classic"><br>入门版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/entry.png" alt="freshman"><br>进阶版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/advanced.png" alt="advance"></p>
<h3 id="u9605_u8BFBManual_u7684_u5FEB_u6377_u952ERemind_u603B_u7ED3"><a href="#u9605_u8BFBManual_u7684_u5FEB_u6377_u952ERemind_u603B_u7ED3" class="headerlink" title="阅读Manual的快捷键Remind总结"></a>阅读Manual的快捷键Remind总结</h3><h4 id="u524D12_u8282"><a href="#u524D12_u8282" class="headerlink" title="前12节"></a>前12节</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>左下上右：hjkl</td>
<td>删改:x d c D C s S r R</td>
<td>查找:F f T t / ?</td>
</tr>
<tr>
<td>快速位移：gg G [Num]G [Num]% H M L zz</td>
<td>复制黏贴：y Y p P</td>
<td>寄存器复制:”[a-z]Y</td>
</tr>
<tr>
<td>对应补粘：”[A-Z]Y</td>
<td>模式：i a o q(record)  R(replace) v(visual) ctrl+v(coloum visual)</td>
<td>范围改动: :[range]s/from/to[gc] \n   :global/place/{cmd}</td>
</tr>
<tr>
<td>排版:gq</td>
<td>大小写:~ guu gUU g~~</td>
<td>多文件:vim -o   vsplit ctrl+w :edit :read :write</td>
</tr>
<tr>
<td>标记:m[a-z]</td>
<td>跳转: ‘[a-z] 和 `.</td>
<td>单词统计：g CTRL-G</td>
</tr>
</tbody>
</table>
<p>单词替换: :%s/\&lt;four\&gt;/4/gc<br>多个文件替换单词(记录-回放)：1.vim *.cpp 2.qq :%s/\&lt;GetResp\&gt;/GetAnswer/g 3.:wnext 4.q 5.999@q<br>使用man查询: K  1.:runtime! ftplugin/man.vim  2.:Man csh </p>
<p>至此，阅读了usr_01 ~ usr_12.txt,下一节继续学习余下部分。</p>
<h4 id="u4F59_u4E0B_u90E8_u5206"><a href="#u4F59_u4E0B_u90E8_u5206" class="headerlink" title="余下部分"></a>余下部分</h4><p>usr_20 命令行：<br>命令行状态，左移一个单词：Shift+Left 或 Ctrl+Left ，删除单词:Ctrl-w ,删除全部文字：Ctrl-u.<br>“:”命令通常具有缩写，但对应只有一个命令，可查看帮助以便记忆使用<br>Tab自动补全，Ctrl+p返回补全上一个选项，Ctrl+d可以显示目录候选文件<br>q: 进入命令行窗口，进行修改历史命令并执行;  用:！执行shell命令</p>
<p>usr_21 记录和会话（没大懂，回头看）：<br>关于viminfo存储状态信息以及重返VIM中断处:oldfilesi<br>关于会话session,主要用于建立自定义窗口布局</p>
<p>usr_22 编辑指定文件<br>:pwd :cd  查找文件gf 加入头文件目录:set path+=~/proj/include<br>find 缓冲区列表 :hidden :bnext :bfirst :bdelete [Num]</p>
<p>usr_23 编辑其他文件<br>识别文件类型:set fileformat<br>加密：vim -x filename 撤销密码:set key=<br>读取二进制文件： vim -b filename<br>字节位置: g Ctrl+g</p>
<p>usr_24 快速插入<br>更正： Ctrl+w  Ctrl+u<br>补全： Ctrl+p  Ctrl+n<br>从下列文件搜索补全词：1.当前文件 2.其他窗口文件 3.其他载入文件（隐藏缓冲区） 4.未载入文件（非激活缓冲区） 5.标签文件 6.被当前文件以#include语句包含的所有头文件<br>可以用’complete’调整搜索顺序，用‘ignorecase’忽略大小写<br>输入上次编辑模式的内容：Ctrl+a<br>逐个重复输入上一行的字符：Ctrl+y  Ctrl+e(下方)<br>插入寄存器内容：Ctrl-r {register}<br>使用abbreviate缩写来简化输入，纠正错误:iabbreviate teh the 和:iabbrev #b /<strong>*</strong> (i表示仅输入模式有效)<br>删除缩写:unabbreviate {name} 和 :abclear<br>避免缩写再映射： :noreabbrev @a adder (防止:imap dd disk-door的干扰)<br>插入特殊字符： Ctrl-v<br>二合字母：Ctrl-k</p>
<p>usr_26 重复<br>改动多个文件： :args *.c<br>在shell脚本里使用vim， vim写了命令，用shell调用执行<br>usr_27 查找命令及模式（方便快速查找）<br>usr_28 折叠<br>zf 创建折叠  zo 打开折叠 zc 关闭折叠 zr 减少折叠数 zR 打开所有 zM 折叠所有<br>usr_29 代码间移动<br>标签 ctags -R<br>Ctrl+] 跳转   Ctrl+t 返回<br>Ctrl+w ] 切换窗口并跳转</p>
<h4 id="u9898_u5916_u8BDD_uFF0C_u5982_u4F55_u9009_u4E66"><a href="#u9898_u5916_u8BDD_uFF0C_u5982_u4F55_u9009_u4E66" class="headerlink" title="题外话，如何选书"></a>题外话，如何选书</h4><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数-&gt;著-&gt;编-&gt;参考引用-&gt;索引-&gt;不看译作-&gt;书评-&gt;牛人在读-&gt;网上内容审核<br>二合字母：Ctrl-k</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The meaning of life is challenging yourself constantly.<br>在工具上磨刀耗费了不少的时间，是时候提升个人能力和领域知识，积累和效率同样重要。</p>
<h3 id="u4ECESublime_u8F6C_u7528V]]>
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vision-Based State Estimation for Autonomous Rotorcraft MAVs in Complex Environments]]></title>
    <link href="https://csrjtan.github.io/2016/02/17/paper-reading-20160217/"/>
    <id>https://csrjtan.github.io/2016/02/17/paper-reading-20160217/</id>
    <published>2016-02-17T06:04:08.000Z</published>
    <updated>2016-02-17T06:23:39.000Z</updated>
    <content type="html"><![CDATA[<p>HKUST<a href="https://sites.google.com/site/eeshaojie/academic-projects" target="_blank" rel="external">沈劭劼</a>的微型无人机避障系统</p>
<h3 id="u6458_u8981"><a href="#u6458_u8981" class="headerlink" title="摘要"></a>摘要</h3><p>机载避障关键点在于低耗的传感器以及实时避障算法，该系统使用25Hz的鱼眼摄像头和一个低频的第二摄像头，外加IMU传感器fusion进行100Hz的飞行器控制</p>
<h3 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h3><p>这里有一个有趣的软件PTAM（Parallel Tracking and Mapping），是一个基于SLAM的增强现实应用，可以去进行参考了解。论文的主要贡献点在于提供了完整的系统架构，从硬件到软件到算法，完成了机载设备的自动导航</p>
<h3 id="u65B9_u6CD5"><a href="#u65B9_u6CD5" class="headerlink" title="方法"></a>方法</h3><p>1.相机标定以及特征提取跟踪<br>2.坐标系的正确转换<br>3.基于单目的Local Mapping<br>4.基于低帧率的立体匹配<br>5.误差校正和修复<br>6.UKF-Based的传感器融合（这一点可以需要的时候进行仔细的研究学习）</p>
<h3 id="u5B9E_u9A8C_u90E8_u5206"><a href="#u5B9E_u9A8C_u90E8_u5206" class="headerlink" title="实验部分"></a>实验部分</h3><p>硬件：公司购买的飞行器，使用ARM7的机载处理器，具有双核1.86GHz和2GB RAM，120GB SSD。传感器为752*480的鱼眼摄像头，以及3.5mm f1.4 1Hz的第二摄像头，MicroStrain 3DM-GX3-25 IMU,用802.11g networking，总重1.983kg.</p>
<p>软件：C++ using ROS, OpenCV,最大特征数1000，以及一些相关参数的调整，最后算法占用了50%的CPU，以及使用该算法与装有Vicon motion tracking system进行比较。</p>
<p>测试：1.算法的姿态与GT比较 2.机载定点盘旋 3.复杂环境里的自动导航</p>
<p>思路：作者主要使用ROS和OpenCV里面的工具进行系统的架构，可以去进行相关研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HKUST<a href="https://sites.google.com/site/eeshaojie/academic-projects" target="_blank" rel="external">沈劭劼</a>的微型无人机避障系统</p>
<h3 id="u64]]>
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++_Primer_Reading2]]></title>
    <link href="https://csrjtan.github.io/2016/01/30/C-Primer-Reading2/"/>
    <id>https://csrjtan.github.io/2016/01/30/C-Primer-Reading2/</id>
    <published>2016-01-30T08:05:37.000Z</published>
    <updated>2016-01-30T12:02:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="C++_u7684_u7F16_u7A0B_u6A21_u5757"><a href="#C++_u7684_u7F16_u7A0B_u6A21_u5757" class="headerlink" title="C++的编程模块"></a>C++的编程模块</h3><p>这一章讲述C++的函数，其中的乐趣在于大型库（标准ANSI库）和自己编写的函数，以及提高编程效率深入学习STL和BOOST C++提供的功能。<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionName</span><span class="params">(parameterList)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	statement(s)</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数中将数组地址作为参数可以节省复制数组所需的时间和内存，地址值和数组长度随系统而异<br>尽可能使用const:1.可以避免无意间修改数据导致的编程错误 2.能够同时处理const和非const的实参<br>按引用传递结构，还有函数指针的知识，C风格字符串：字符数组，字符串常量和字符串指针，以及string类.</p>
<h3 id="u51FD_u6570_u63A2_u5E7D"><a href="#u51FD_u6570_u63A2_u5E7D" class="headerlink" title="函数探幽"></a>函数探幽</h3><p>内联函数、按引用传递、默认参数值、函数重载以及模板函数<br>C++新增加一种右值引用。返回引用时，避免返回函数终止则不再存在的内存单元引用</p>
<p>函数模板<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;typename <span class="type">AnyType</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="type">Swap</span>(<span class="type">AnyType</span> &amp;a,<span class="type">AnyType</span> &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">AnyType</span> temp;</span><br><span class="line">	temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>模板匹配的过程：1.创建候选函数列表 2.使用候选函数列表创建可行函数列表 3.确定是否有最佳可行函数<br>最佳到最差匹配顺序：1.完全匹配 2.提升转换 3.标准转换 4.用户定义转换</p>
<h3 id="u5185_u5B58_u6A21_u578B_u548C_u540D_u79F0_u7A7A_u95F4"><a href="#u5185_u5B58_u6A21_u578B_u548C_u540D_u79F0_u7A7A_u95F4" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h3><p>单独编译，将头文件和结构文件以及程序文件分开，头文件使用防护(guarding)方案，避免文件定义结构两次。（不同编译器创建的二进制模块很可能无法正确地链接，可以拿到源码后重新编译连接解决问题）</p>
<h4 id="u5B58_u50A8_u6301_u7EED_u6027_uFF0C_u4F5C_u7528_u57DF_u548C_u94FE_u63A5_u6027"><a href="#u5B58_u50A8_u6301_u7EED_u6027_uFF0C_u4F5C_u7528_u57DF_u548C_u94FE_u63A5_u6027" class="headerlink" title="存储持续性，作用域和链接性"></a>存储持续性，作用域和链接性</h4><p>自动存储持续性：自动默认的变量，在块内或者函数生命周期里存在<br>静态存储持续性：static定义变量在程序运行过程中都存在<br>线程存储持续性（c++11):thread_local变量生命周期与线程一样长<br>动态存储持续性：用new分配的内存，直到delete才释放</p>
<p>静态变量的三种链接性：1.外部链接性（其他文件中访问）extern 关键字表示使用外部变量。  2.内部链接性（当前文件访问） 3.无链接性（函数或块内访问）</p>
<p>组织项目策略：头文件定义用户类型，为操纵类型的函数提供原型；源代码文件放置对应函数的定义；main和调用这些函数的函数放在第三文件上。</p>
<p>为了减少命名冲突，引入了命名空间的概念，空间还能嵌套</p>
<h3 id="u5BF9_u8C61_u548C_u7C7B"><a href="#u5BF9_u8C61_u548C_u7C7B" class="headerlink" title="对象和类"></a>对象和类</h3><p>突出显示OOP特性：抽象；封装和数据隐藏；多态；继承以及代码的可重用性。<br>接口是共享框架，供两个系统交互时使用的。<br>类的构造函数和析构函数，列表初始化参数，this指针，枚举结构体等。</p>
<h3 id="u4F7F_u7528_u7C7B"><a href="#u4F7F_u7528_u7C7B" class="headerlink" title="使用类"></a>使用类</h3><p>运算符重载，友元函数，重载&lt;&lt;，状态成员，类的自动转换和强制类型转换。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName ClassName::<span class="keyword">operator</span>+ (<span class="keyword">const</span> ClassName &amp; c) <span class="keyword">const</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>重载限制：1.至少一个操作数是用户定义类型 2.使用运算符时不能违反运算符原来的句法规则 3.不能创建新运算符 4.不能重载sizeof . * :: ?: typeid const_cast static_cast 5.= () [] -&gt;只能通过成员函数进行重载 6.一般用友元重载&lt;&lt;<br>对于类的总结：相对于简单C-风格，使用类必须谨慎和小心，作为补偿，它为我们完成更多工作</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="C++_u7684_u7F16_u7A0B_u6A21_u5757"><a href="#C++_u7684_u7F16_u7A0B_u6A21_u5757" class="headerlink" title="C++的编程模块"></a>C++的编程模块</h3]]>
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无人机项目]]></title>
    <link href="https://csrjtan.github.io/2016/01/26/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>https://csrjtan.github.io/2016/01/26/无人机项目/</id>
    <published>2016-01-26T13:29:44.000Z</published>
    <updated>2016-03-11T08:07:08.000Z</updated>
    <content type="html"><![CDATA[<p>苦苦做了几个月的项目，进展好慢，自己抗拒工程的心一直没有减退，还是自己抗拒进步，克服困难的心呢。</p>
<h3 id="u5173_u4E8E_u9879_u76EE_u7684_u73B0_u72B6"><a href="#u5173_u4E8E_u9879_u76EE_u7684_u73B0_u72B6" class="headerlink" title="关于项目的现状"></a>关于项目的现状</h3><p>不要畏惧麻烦和困难，用工程和代码以及实验来解决问题，问题是常有的。项目现在复杂度和硬件上遇到不少麻烦，应该尽力去克服。<br>遇到的问题：1.旋翼和妙算未到 2.完成一套基本的操作流程 3.如何有效利用guidance的数据 4.优化slam里面的误差 5.避障和跟踪算法 6.飞行器的有效起飞和控制<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV1.jpg" alt="与崇雨讨论的进展图"></p>
<h3 id="u5BF9_u4E8E_u9879_u76EE_u672A_u6765_u7684_u6784_u60F3"><a href="#u5BF9_u4E8E_u9879_u76EE_u672A_u6765_u7684_u6784_u60F3" class="headerlink" title="对于项目未来的构想"></a>对于项目未来的构想</h3><p>首先还是要热爱项目，对此充满希望，才能完善完成，首先附上现用的工具，列出接下来努力的方向和目标<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV2.png" alt="项目现状和使用技术"><br>可以看到，接下来可以对无人机的几个经典库进行有效的学习和利用，进行更强的关于理论性的学习。周四Dr.Li shuai的课程，《代码大全》、《C++ Primer》、《算法导论》、《LINUX私房菜》、《OPENCV Code Book》、《统计学习方法》、《PCL学习使用》、《G2O的使用》以及SLAM相关方向的论文，但是好像有点多，所以我觉得代码和工程的能力是首当其冲，理论知识和英语的恶补也应该并驾齐驱。</p>
<h3 id="u6682_u65F6_u5BF9_u4E8E_u9879_u76EE_u7684_u67B6_u6784"><a href="#u6682_u65F6_u5BF9_u4E8E_u9879_u76EE_u7684_u67B6_u6784" class="headerlink" title="暂时对于项目的架构"></a>暂时对于项目的架构</h3><p>主要是对于算法层上的组织，这几块高效的智能操作应当如何实施<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV3.png" alt="无人机项目的整体架构"><br>是否可以考虑率先完成一个小的demo,进而进行某个点的深入学习研发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>苦苦做了几个月的项目，进展好慢，自己抗拒工程的心一直没有减退，还是自己抗拒进步，克服困难的心呢。</p>
<h3 id="u5173_u4E8E_u9879_u76EE_u7684_u73B0_u72B6"><a href="#u5173_u4E8E_u9879_u76EE]]>
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟G++,MAKE和CMAKE奋斗的日子]]></title>
    <link href="https://csrjtan.github.io/2016/01/22/%E8%B7%9FG-MAKE%E5%92%8CCMAKE%E5%A5%8B%E6%96%97%E7%9A%84%E6%97%A5%E5%AD%90/"/>
    <id>https://csrjtan.github.io/2016/01/22/跟G-MAKE和CMAKE奋斗的日子/</id>
    <published>2016-01-22T13:32:29.000Z</published>
    <updated>2016-01-23T13:15:44.000Z</updated>
    <content type="html"><![CDATA[<p>很有必要认真地总结一下这三个小朋友的关系，但我可是被他们仨虐了好久，首先感谢<a href="http://blog.atime.me/note/cmake.html" target="_blank" rel="external">MWB</a>,jacker的《Cmake实践》</p>
<h3 id="u5982_u4F55_u5B89_u88C5"><a href="#u5982_u4F55_u5B89_u88C5" class="headerlink" title="如何安装"></a>如何安装</h3><p>现在用的是G++-4.9：</p>
<pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.9
cd /usr/bin/
sudo ln -s g++-4.9 g++ -f
sudo ln -s gcc-4.9 gcc -f
</code></pre><p>make应该有自带的，cmake就上官网下载包</p>
<pre><code>sudo make
sudo make install
</code></pre><h3 id="GCC/G++"><a href="#GCC/G++" class="headerlink" title="GCC/G++"></a>GCC/G++</h3><p>经过4步：预处理（预处理器cpp），编译(编译器egcs)，汇编(汇编器as)和链接（连接器ld）</p>
<pre><code>//预处理
gcc -E test.c -o test.i   //i文件
//编译
gcc -S test.i -o test.s   //s文件
//汇编
gcc -c test.s -o test.o   //o文件
//链接
gcc test.o -o test        //bin文件
</code></pre><p>优化等级: -O -O2 -O3<br>包含头： -include  -I<br>链接库：  -l  -L<br>警告信息： -Wall 、 -w 和 -v<br>定义环境变量：D<br>(注意，通常手写链接参数很麻烦，很多库提供链接参数的程序，名字叫xxx-config，放在/usr/bin下<br>于是有了  gcc gtktest.c ‘pkg-confg gtk+ –libs –cflags’<br>–libs定义了链接需要的参数，–cflags是生成头文件包含的目录)</p>
<p>交叉编译：指本地编译其他平台执行的程序，需要另外用-L和-I来连接库和头文件</p>
<h3 id="MAKE"><a href="#MAKE" class="headerlink" title="MAKE"></a>MAKE</h3><p>基本语法<br>target : prerequisites<br>    command<br>自动推导以及文件依赖关系后面的命令：看到[.o]文件会自动把[.c]文件加入依赖项。</p>
<p>GNU的MAKE工作方式：<br>1.读入所有Makefile<br>2.读入被Include的其他makefile<br>3.初始化文件中变量<br>4.推导隐晦规则，分析所有规则<br>5.为所有目标文件创建依赖关系链<br>6.根据依赖，决定哪些目标的生成<br>7.执行生成命令</p>
<h3 id="CMAKE"><a href="#CMAKE" class="headerlink" title="CMAKE"></a>CMAKE</h3><p>(记下一些关键词)<br>CMAKE架构项目学习<br>基本用法<br>PROJECT<br>自动隐定义 PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR<br>SET(NAME VAR)<br>MESSAGE([STATUS | DEBUG] “string” var)<br>ADD_SUBDIRECTORY(folderName)<br>ADD_EXECUTABLE(targets src_lists)</p>
<p>make install<br>CMAKE有用的变量 CMAKE_INSTALL_PREFIX<br>INSTALL(FILES file_list DESTINATION folderName)<br>INSTALL(PROGRAMS .sh DESTINATION bin)<br>INSTALL(DIRECTORY doc/ DESTINATION doc)</p>
<p>生成动态和静态库<br>ADD_LIBRARY(libName [SHARED|STATIC] src_lists)<br>注意：要动态和静态库同名，先用别名生成静态库，再改别名<br>如：ADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})<br>SET_TARGET_PROPERTIES(hello_static PROPERTYES OUTPUT_NAME “hello”)</p>
<p>链接头文件和动态库<br>INCLUDE_DIRECTORIES(folderName)<br>LINK_DIRECTORIES(folderName)</p>
<p>ADD_EXECUTABLE(main ${SRC_LIST})<br>TARGET_LINK_LIBRARIES(main libNames)</p>
<p>使用CMAKE_INCLUDE_PATH的环境变量，用FIND_PATH可以轻松找到对应的头文件</p>
<h3 id="u5B5F_u8001_u5E08_u7684_u5DE5_u4F5C_u4ECB_u7ECD"><a href="#u5B5F_u8001_u5E08_u7684_u5DE5_u4F5C_u4ECB_u7ECD" class="headerlink" title="孟老师的工作介绍"></a>孟老师的工作介绍</h3><p>西安交通大学的<a href="http://www.cs.cmu.edu/~deyum/" target="_blank" rel="external">孟老师</a>数学优化和建模很厉害，给了一下内容的讲座</p>
<h4 id="Noise_Modeling_Principle"><a href="#Noise_Modeling_Principle" class="headerlink" title="Noise Modeling Principle"></a>Noise Modeling Principle</h4><p>一般ML问题$min_wL(x,\phi(w))+R(w)$<br>然后很多工作围绕正则项R(w)展开优化，L主要是$L_0 , L_1 ,L_P$<br>利用贝叶斯模型来解释，可以将噪声模型与损失函数对应起来，然后就是w和loss func迭代求解收敛，提到了使用混合高斯模型建模，有利于分离Low-rank structure数据的噪声</p>
<h4 id="Adaptive_Noise_Learning"><a href="#Adaptive_Noise_Learning" class="headerlink" title="Adaptive Noise Learning"></a>Adaptive Noise Learning</h4><p>假设数据都是Low-Rank Structure，然后进行噪声提取分离，目前用在的应用有 1.人脸去噪 2.背景提取 3.HSI去噪 接下来做一些雨雪分离，以及CT医学图像的去噪应用。</p>
<h4 id="Self-Pace_Learning"><a href="#Self-Pace_Learning" class="headerlink" title="Self-Pace Learning"></a>Self-Pace Learning</h4><p>提到了ML，Cognitive Science和Self-pace Learning的概念，主要原理是让模型学习从易到难，从而筛选掉一些难的数据不进行学习，其中很多的参数和变量应该用非监督的方法自动学习，主要围绕机器学习的方法展开，最后论证一下Self Pace Learning的一些有效性<a href="http://arxiv.org/pdf/1511.06049v1.pdf" target="_blank" rel="external">证明</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很有必要认真地总结一下这三个小朋友的关系，但我可是被他们仨虐了好久，首先感谢<a href="http://blog.atime.me/note/cmake.html" target="_blank" rel="external">MWB</a>,jacker的《Cmake]]>
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++_Primer_Reading1]]></title>
    <link href="https://csrjtan.github.io/2016/01/22/c-Primer-Reading1/"/>
    <id>https://csrjtan.github.io/2016/01/22/c-Primer-Reading1/</id>
    <published>2016-01-22T01:56:26.000Z</published>
    <updated>2016-01-22T02:39:36.000Z</updated>
    <content type="html"><![CDATA[<p>前六章的总结</p>
<h3 id="u9884_u5907_u77E5_u8BC6"><a href="#u9884_u5907_u77E5_u8BC6" class="headerlink" title="预备知识"></a>预备知识</h3><p>全书将讲述最基本的C++用法，到面向对象编程(OOP)，再介绍对泛型编程的支持。</p>
<p>1.C++的介绍：继承了C的高效简洁，由70年代贝尔实验室Dennis开发操作系统UNIX使用。<br>2.可移植性和标准：两个障碍，硬件兼容和语言兼容，制订了C++98,现在为C++11标准<br>3.程序的过程：编译、建立、生成、链接、运行和调试</p>
<h3 id="u5F00_u59CB_u5B66_u4E60C++"><a href="#u5F00_u59CB_u5B66_u4E60C++" class="headerlink" title="开始学习C++"></a>开始学习C++</h3><p>了解C++语法：声明语句、赋值语句、消息语句、函数调用、函数原型和返回语句</p>
<h3 id="u57FA_u672C_u6570_u636E"><a href="#u57FA_u672C_u6570_u636E" class="headerlink" title="基本数据"></a>基本数据</h3><p>基本类型分为：1.存储为整数的值，2.存储为浮点格式的值。<br>整形由小到大：bool,char,signed cahr,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long 和long long(C++11),unsigned long long.<br>浮点类型:float(32 bits),double(64)和long double。<br>注意：类型转换和AUTO的用法，当发现使用时有一种类型是需要的，会感谢C++提供了该类型。</p>
<h3 id="u590D_u5408_u7C7B_u578B"><a href="#u590D_u5408_u7C7B_u578B" class="headerlink" title="复合类型"></a>复合类型</h3><p>数组，C-风格字符串，string类,结构structure，共同体union,枚举enum，指针Pointer,动态数组和结构，vector和array类</p>
<h3 id="u5FAA_u73AF_u548C_u5173_u7CFB_u8868_u8FBE_u5F0F"><a href="#u5FAA_u73AF_u548C_u5173_u7CFB_u8868_u8FBE_u5F0F" class="headerlink" title="循环和关系表达式"></a>循环和关系表达式</h3><p>if,swich case,for循环，while循环,typedef工具以及各项运算符。</p>
<h3 id="u5206_u652F_u548C_u903B_u8F91_u8FD0_u7B97_u7B26"><a href="#u5206_u652F_u548C_u903B_u8F91_u8FD0_u7B97_u7B26" class="headerlink" title="分支和逻辑运算符"></a>分支和逻辑运算符</h3><p>if语句，&amp;&amp; || ！以及cctype字符函数,?:,基本的文件I/O</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前六章的总结</p>
<h3 id="u9884_u5907_u77E5_u8BC6"><a href="#u9884_u5907_u77E5_u8BC6" class="headerlink" title="预备知识"></a>预备知识</h3><p>全书将讲述最基本的C]]>
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[林老师IJCV2015的工作]]></title>
    <link href="https://csrjtan.github.io/2016/01/20/paper-reading-20160120/"/>
    <id>https://csrjtan.github.io/2016/01/20/paper-reading-20160120/</id>
    <published>2016-01-20T06:24:37.000Z</published>
    <updated>2016-02-17T06:09:12.000Z</updated>
    <content type="html"><![CDATA[<p>新年好，新年愿工程进展，论文有望。加油！</p>
<h3 id="u9A6C_u91CC_u5170_28MaryLand_29_u5927_u5B66_u7684Larry_Davis_u8BBF_u95EE"><a href="#u9A6C_u91CC_u5170_28MaryLand_29_u5927_u5B66_u7684Larry_Davis_u8BBF_u95EE" class="headerlink" title="马里兰(MaryLand)大学的Larry Davis访问"></a>马里兰(MaryLand)大学的Larry Davis访问</h3><p>受到张老师的邀请，过来进行group-talk,讲解一下最近CV的进展，他们最近的GCNN（Grid）的工作，以及基于common sense knowledge进行modeling解决一些视频识别的问题，包括one-on-one basketball game和survillence of car parking.</p>
<p>首先，GCNN是使用multi grid windows的思想，通过RCNN进行迭代的逼近学习，也是用于物体的识别。然后基于一些基本common sense建模，对于传统的activity recognition有一定的解释。讲述最近deep learning, cloud computing, GPU acceleration, Machine Learning等一些方法的推进都在有利于CV的进步，然CV离肉眼视觉识别依然有很大的距离。 最近的科研方向可以有Arichitecture Optimization，Mathematical Optimization and so on。明天将会继续介绍一下以往以及未来cv的相关工作。</p>
<h3 id="u6797_u8001_u5E08_u7684IJCV2015_u8BBA_u6587_u300AA_Deep_Structured_Model_with_Radius-Margin_Bound_for_3D_Human_Activity_Recognition_u300B"><a href="#u6797_u8001_u5E08_u7684IJCV2015_u8BBA_u6587_u300AA_Deep_Structured_Model_with_Radius-Margin_Bound_for_3D_Human_Activity_Recognition_u300B" class="headerlink" title="林老师的IJCV2015论文《A Deep Structured Model with Radius-Margin Bound for 3D Human Activity Recognition》"></a>林老师的IJCV2015论文《A Deep Structured Model with Radius-Margin Bound for 3D Human Activity Recognition》</h3><p>摘要：用CNN来做活动识别，1.加入隐临时变量来分解activity成sub activity，自动学习子活动 2.结合radius-margin bound的方法作为约束项。<br>训练模型的过程不断迭代三部曲：</p>
<pre><code>- 发现优化的隐变量
- 通过生成的特征，更新分类器
- 更新网络的参数
</code></pre><h4 id="Introduction_of_human_activity_classification"><a href="#Introduction_of_human_activity_classification" class="headerlink" title="Introduction of human activity classification"></a>Introduction of human activity classification</h4><p>  主要两个问题：a.the complexity of representing high-level activities<br>                b.the ambiguity in temporal segmentation of sub-activities which constitute an activity</p>
<h4 id="Related_Work"><a href="#Related_Work" class="headerlink" title="Related Work"></a>Related Work</h4><p>  起初关注于设计健壮和可描述性的features<br>  然后关注表达活动间的变化部分以及上下文的关系<br>  最近And-Or图关系表达可借助大数据变量进一步表达<br>  这里的方法是用deep neutral network to learning human action recognition from 3D videos.</p>
<h4 id="Our_work"><a href="#Our_work" class="headerlink" title="Our work"></a>Our work</h4><p>Spatio-temporal CNNs<br>Latent Temporal Structure:<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/KeZe_ICCV2015_1.png" alt=""><br>Deep Model with Relaxed Radius-Margin Bound:<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/KeZe_ICCV2015_2.png" alt=""><br>The Radius-Margin Bound是受到radius-margin SVM的启发，用于增强模型的泛化能力，变成每次迭代的loss function加入了Radius-Margin Ratio $ \frac{1}{2}||w||^2R_\phi^2$,进行non-convex optimization.可以利用网络的softmax层进行部分参数的调解学习。</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>详细工作的实现：<br>Architecture of Deep Neural Networks<br>Dropout trick<br>Learning Algorithm<br>Datasets and Empirical Analysis, Experimental Results</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p><strong>贡献点</strong>：<br>1.A deep and latent-structured model<br>         2.引入了raius-margin的正则项<br>         3.有效迭代的优化子活动分解以及基于边缘学习的分类器<br><strong>缺点</strong>：<br> 1.scalability of model inference<br>      2.引入更多的计算量，当活动的类别多了会变慢<br><strong>未来的工作</strong>：<br> 1.将模型泛化成compositinal grammar rules: e.g. And-Or grammars<br>            2.修改模型以适应2D的视频</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>新年好，新年愿工程进展，论文有望。加油！</p>
<h3 id="u9A6C_u91CC_u5170_28MaryLand_29_u5927_u5B66_u7684Larry_Davis_u8BBF_u95EE"><a href="#u9A6C_u91CC_u5170_28]]>
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《爱的五种语言》]]></title>
    <link href="https://csrjtan.github.io/2015/12/23/%E3%80%8A%E7%88%B1%E7%9A%84%E4%BA%94%E7%A7%8D%E8%AF%AD%E8%A8%80%E3%80%8B/"/>
    <id>https://csrjtan.github.io/2015/12/23/《爱的五种语言》/</id>
    <published>2015-12-23T06:51:03.000Z</published>
    <updated>2016-03-11T08:07:29.000Z</updated>
    <content type="html"><![CDATA[<p>有一段时间没有更新博客了，觉得不写还是会颓，应该积极向上的去写更多东西，关于自己，关于读书，关于学习，每天应该在不断的总结和反省中前进。</p>
<h3 id="u300A_u7231_u7684_u4E94_u79CD_u8BED_u8A00_u300B"><a href="#u300A_u7231_u7684_u4E94_u79CD_u8BED_u8A00_u300B" class="headerlink" title="《爱的五种语言》"></a>《爱的五种语言》</h3><p>这里提出使用五种爱语，我们应该抓住伴侣的主要爱语，这样可以有效地提高爱箱，对于人与人之间的相处事半功半，实际可以以此延伸到亲人和友情，这是一种让人感受爱意最直接高效的方法。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/爱的五种语言.png" alt=""></p>
<h3 id="u5173_u4E8E_u4E2A_u4EBA_u7BA1_u7406"><a href="#u5173_u4E8E_u4E2A_u4EBA_u7BA1_u7406" class="headerlink" title="关于个人管理"></a>关于个人管理</h3><p>坚持每晚11点休息，早上6点半起床吧，早起的一天才能正能量满满，积极向上呢，项目最近整体复杂度已经有点高，希望自己尽快使它们有效完成吧，腾出手来关注一些真正有用的事情。<br>接下来是个人管理的小图<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/每日个人管理.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有一段时间没有更新博客了，觉得不写还是会颓，应该积极向上的去写更多东西，关于自己，关于读书，关于学习，每天应该在不断的总结和反省中前进。</p>
<h3 id="u300A_u7231_u7684_u4E94_u79CD_u8BED_u8A00_u300B"><a href]]>
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dynamic occlusion avoidance approach based on the depth image of moving visual object]]></title>
    <link href="https://csrjtan.github.io/2015/11/25/paper-reading-20151125/"/>
    <id>https://csrjtan.github.io/2015/11/25/paper-reading-20151125/</id>
    <published>2015-11-25T06:13:16.000Z</published>
    <updated>2016-02-17T06:09:28.000Z</updated>
    <content type="html"><![CDATA[<p>这周回来帮崇雨审一个文章，燕大的关于动态物体避障的方案，总体来说写得比较自我，而且没有系统和实用的示例，只是从理论上写的一个方案，自己提出了很多新的东西，然而没办法去很好验证。整个流程是提取曲面特征，通过下一帧的Depth变化为依据，最大化The best Next View来求出摄像机的移动策略，这里将运动评估作为一个term加入到the best next view model里面，通过迭代优化的过程来求出摄像机的位置和方向(x,v).用观测到障碍物体的最大面积来作为调整相机的依据，从一定假设上可以实现避障。</p>
<h3 id="Dynamic_occlusion_avoidance_approach_based_on_the_depth_image_of_moving_visual_object"><a href="#Dynamic_occlusion_avoidance_approach_based_on_the_depth_image_of_moving_visual_object" class="headerlink" title="Dynamic occlusion avoidance approach based on the depth image of moving visual object"></a>Dynamic occlusion avoidance approach based on the depth image of moving visual object</h3><p>KeyWords:Moving Object,Depth Image,Dynamic Occlusion Avoidance,Best View Model</p>
<h4 id="Abstract_3ADynamic_Occlusion_avoidance_based_on_the_depth_image"><a href="#Abstract_3ADynamic_Occlusion_avoidance_based_on_the_depth_image" class="headerlink" title="Abstract:Dynamic Occlusion avoidance based on the depth image."></a>Abstract:Dynamic Occlusion avoidance based on the depth image.</h4><p>首先，用Anti-projection Transformation来获得移动物体的每个像素的三维坐标<br>然后，用第二张深度图来构建The Best View Model<br>第三，高斯曲率的特征是平面变换的本质计量，所以运动评估比较两个高斯曲率特征矩阵来实现<br>(Gaussian Curvature:The product of the maximum and minimum curvatures of the sectionsIt is the intrinsic measure of curvature.)<br>最后，结合Best View Model和运动检测结果，最优化目的是使摄像机行为满足移动物体的避障过程。</p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>主要问题：通过物体的障碍提示来寻找最优观测方向和位置<br>Next Best View:</p>
<ul>
<li>用Octree模型来描述可视物体，然后对于不同观察情况的节点，给定不同的分数。</li>
<li>用大量周全的Candidate View</li>
<li>建立一个相似的参数模型，通过depth data和current fitted model来拟合</li>
<li>用B-spline计算信息增益来构建最佳NEXT VIEW</li>
<li>结合on-line theory来优化物体的3D重构<br>缺点：没有考虑遮蔽</li>
</ul>
<p>引入occlusion方法<br>缺点：受限于摄像机位置、特定的设备和先验信息，以上均不适用于移动的物体</p>
<h3 id="u4E09_u4E2A_u95EE_u9898_uFF1A"><a href="#u4E09_u4E2A_u95EE_u9898_uFF1A" class="headerlink" title="三个问题："></a>三个问题：</h3><p>1.如何解决动态遮蔽的避障问题? -&gt; 用一个优化模型，结合运动预测在Best view Model里<br>2.如何通过深度图来预测可视物体的运动? -&gt; 用两个高斯曲率特征矩阵的匹配来求R T,用到SIFT和SVD<br>3.如何有效评估动态遮蔽的影响? -&gt; 用“effective avoidance rate”来评估算法的性能</p>
<h3 id="Method_Overview"><a href="#Method_Overview" class="headerlink" title="Method Overview"></a>Method Overview</h3><p>1.The analysis of dynamic occlusion avoidance<br>获得遮蔽的最大区域</p>
<p>2.The overall idea of dynamic occlusion avoidance<br>首先，移动物体相近深度图的像素进行三维坐标恢复（用Anti-projection），则遮蔽暗示可以从第二幅图得到<br>基于上述，用第二张深度图的遮蔽信息来构建Best View Model<br>接着，用三维坐标点的形式，做高斯曲率特征矩阵来匹配两个相近的深度图<br>最后，将运动预测结合到最佳视角模型里。</p>
<h3 id="The_Approach_to_dynamic_occlusion_avoidance_based_on_depth_image"><a href="#The_Approach_to_dynamic_occlusion_avoidance_based_on_depth_image" class="headerlink" title="The Approach to dynamic occlusion avoidance based on depth image"></a>The Approach to dynamic occlusion avoidance based on depth image</h3><p>1.Constructing the occlusion region to be avoided<br>构建出patch</p>
<p>2.Constructing the best view model<br>通过构建最大化Occlusion面积</p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>step1:Calc the 3D pixels and the Gaussian Curvature Feature matrices<br>step2:Detect the Occlusion Boundary and establish the occlusion region in second depth<br>step3:Contruct the best view model<br>step4:Match the key points<br>step5:Solve the Objective formula<br>step6:Plan the next view of camera<br>step7:Acquire a depth image and calc the f(x)<br>step8:If the difference between two adjacent f(x) is less than a given threshold,then terminated,or jump to Step 4.</p>
<h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>1.Add emotion estimate in Best Next View to dynamic occlusion avoidance<br>2.Based the depth image to solve the R and T transformation<br>3.Propose the “Effective avoidance rate” to measure the performance of the algorithm.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这周回来帮崇雨审一个文章，燕大的关于动态物体避障的方案，总体来说写得比较自我，而且没有系统和实用的示例，只是从理论上写的一个方案，自己提出了很多新的东西，然而没办法去很好验证。整个流程是提取曲面特征，通过下一帧的Depth变化为依据，最大化The best Next Vie]]>
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一学期总结]]></title>
    <link href="https://csrjtan.github.io/2015/11/25/%E7%AC%AC%E4%B8%80%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <id>https://csrjtan.github.io/2015/11/25/第一学期总结/</id>
    <published>2015-11-25T00:52:01.000Z</published>
    <updated>2015-11-25T01:17:26.000Z</updated>
    <content type="html"><![CDATA[<h3 id="DJI_u65E0_u4EBA_u673A_u907F_u969C_u98DE_u884C_u9879_u76EE"><a href="#DJI_u65E0_u4EBA_u673A_u907F_u969C_u98DE_u884C_u9879_u76EE" class="headerlink" title="DJI无人机避障飞行项目"></a>DJI无人机避障飞行项目</h3><h4 id="u7814_u8BFB_u4E86CAMERA_CALIBRATION_2CSTEREO_VISION_2CSLAM"><a href="#u7814_u8BFB_u4E86CAMERA_CALIBRATION_2CSTEREO_VISION_2CSLAM" class="headerlink" title="研读了CAMERA CALIBRATION,STEREO VISION,SLAM"></a>研读了CAMERA CALIBRATION,STEREO VISION,SLAM</h4><p>其中做SLAM的时候基于opencv、pcl、g2o为依赖库的开发</p>
<h3 id="DJI_u90E8_u4EF6_u7684_u5B66_u4E60_u4F7F_u7528"><a href="#DJI_u90E8_u4EF6_u7684_u5B66_u4E60_u4F7F_u7528" class="headerlink" title="DJI部件的学习使用"></a>DJI部件的学习使用</h3><p>Guidance的数据订阅和传输接口，M100的GPS线损坏，而且室内校准较难，使用例程进行姿态控制</p>
<h3 id="u8BFE_u7A0BAdvanced_Algorithm"><a href="#u8BFE_u7A0BAdvanced_Algorithm" class="headerlink" title="课程Advanced Algorithm"></a>课程Advanced Algorithm</h3><p>学习了多种优化算法以及分析复杂度，课程report使用random algorithm来优化stereo matching的过程</p>
<h3 id="u4E00_u4E2A_u5B66_u671F_u8FC7_u53BB_u4E86_uFF0C_u5B66_u5230_u548C_u505A_u51FA_u6765_u7684_u6210_u679C_u4E0D_u591A_uFF0C_u53CD_u601D_u81EA_u5DF1_u7684_u6548_u7387_u4EE5_u53CA_u8FF7_u832B_uFF0C_u5BFC_u81F4_u9006_u98CE_u800C_u884C_uFF0C_u52A0_u6CB9_u5427_uFF0C_u4E0D_u7136_u8FDE_u6BD5_u4E1A_u90FD_u4E0D_u597D_u8BF4_u3002_u4E0D_u80FD_u518D_u4F9D_u8D56_u522B_u4EBA_u4E00_u8D77_u505A_u4E4B_u7C7B_u7684_uFF0C_u81EA_u5DF1_u72EC_u884C_u524D_u5F80_u5427_uFF0C_u95EE_u9898_u603B_u662F_u5B58_u5728_uFF0C_u95EE_u9898_u603B_u662F_u53EF_u4EE5_u89E3_u51B3_u7684_uFF0C_u4E0D_u8981_u9003_u907F_u62D6_u5EF6_u3002"><a href="#u4E00_u4E2A_u5B66_u671F_u8FC7_u53BB_u4E86_uFF0C_u5B66_u5230_u548C_u505A_u51FA_u6765_u7684_u6210_u679C_u4E0D_u591A_uFF0C_u53CD_u601D_u81EA_u5DF1_u7684_u6548_u7387_u4EE5_u53CA_u8FF7_u832B_uFF0C_u5BFC_u81F4_u9006_u98CE_u800C_u884C_uFF0C_u52A0_u6CB9_u5427_uFF0C_u4E0D_u7136_u8FDE_u6BD5_u4E1A_u90FD_u4E0D_u597D_u8BF4_u3002_u4E0D_u80FD_u518D_u4F9D_u8D56_u522B_u4EBA_u4E00_u8D77_u505A_u4E4B_u7C7B_u7684_uFF0C_u81EA_u5DF1_u72EC_u884C_u524D_u5F80_u5427_uFF0C_u95EE_u9898_u603B_u662F_u5B58_u5728_uFF0C_u95EE_u9898_u603B_u662F_u53EF_u4EE5_u89E3_u51B3_u7684_uFF0C_u4E0D_u8981_u9003_u907F_u62D6_u5EF6_u3002" class="headerlink" title="一个学期过去了，学到和做出来的成果不多，反思自己的效率以及迷茫，导致逆风而行，加油吧，不然连毕业都不好说。不能再依赖别人一起做之类的，自己独行前往吧，问题总是存在，问题总是可以解决的，不要逃避拖延。"></a>一个学期过去了，学到和做出来的成果不多，反思自己的效率以及迷茫，导致逆风而行，加油吧，不然连毕业都不好说。不能再依赖别人一起做之类的，自己独行前往吧，问题总是存在，问题总是可以解决的，不要逃避拖延。</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="DJI_u65E0_u4EBA_u673A_u907F_u969C_u98DE_u884C_u9879_u76EE"><a href="#DJI_u65E0_u4EBA_u673A_u907F_u969C_u98DE_u884C_u9879_u76EE" clas]]>
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[斯坦福公开课机器人学]]></title>
    <link href="https://csrjtan.github.io/2015/11/14/OpenClassRobotic1/"/>
    <id>https://csrjtan.github.io/2015/11/14/OpenClassRobotic1/</id>
    <published>2015-11-13T16:04:37.000Z</published>
    <updated>2016-03-11T08:06:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_u6982_u8FF0"><a href="#1-_u6982_u8FF0" class="headerlink" title="1.概述"></a>1.概述</h3><p>这门课程主要讲述机器人的一些基本知识，包括运动学，动力学，机臂控制，一些前沿研究。<br>由于最近做定位地图，涉及较多robotic的知识，在这里直接看一下入门，之后希望可以对ROS、PCL、G2O等重要工具展开学习。</p>
<h4 id="2-_u7A7A_u95F4_u63CF_u8FF0_uFF0C_u5E7F_u4E49_u7684_u5750_u6807"><a href="#2-_u7A7A_u95F4_u63CF_u8FF0_uFF0C_u5E7F_u4E49_u7684_u5750_u6807" class="headerlink" title="2.空间描述，广义的坐标"></a>2.空间描述，广义的坐标</h4><p>在二维空间，一个刚性物体的姿态只有3个自由度，$x,y,\theta$<br>在三维空间，一个刚性物体的姿态会有6个自由度，$x,y,z,\theta,\gamma,\phi$</p>
<p>这里描述坐标系的转换可以用一个矩阵，其中旋转矩阵$ R_{AB}=R_{BA}^T $,具有<strong>正交性</strong>，<br>$ R_{AB}^{-1} = R_{BA} = R_{BA}^T $，并且满足:<br>$$ r_X^2 = r_Y^2 = r_Z^2 = 1 $$<br>$$ r_X * r_Y = r_X * r_Z = r_Y * r_Z = 0 $$<br>其中正交矩阵相关的一些矩阵分解有：QR、SVD、谱分解和极分解。</p>
<p>相对而言，T不会满足旋转矩阵R的这些特性，这里也是基于右手系的约束。<br>为了方便矩阵的运算，我们将R和T矩阵组合并添加一维[0 0 0 1]变成4 * 4的矩阵，形成<strong>齐次</strong>.</p>
<h4 id="3-_u8BA8_u8BBA_u6B27_u62C9_u89D2_u548C_u65CB_u8F6C"><a href="#3-_u8BA8_u8BBA_u6B27_u62C9_u89D2_u548C_u65CB_u8F6C" class="headerlink" title="3.讨论欧拉角和旋转"></a>3.讨论欧拉角和旋转</h4><p>介绍了柔性制动器，气压驱动，上节课讲的内容的转换，可以描述坐标系转换，或者点的映射。由于扩展了齐次坐标系，所以末端的坐标系可以直接从基座变换矩阵T相乘解得，但在描述旋转的时候，用3*3的矩阵有9个参数，过于<strong>冗余</strong>，我们考虑更为精炼的表达方式，更高效地表示旋转。</p>
<p>引入一个，对于刚性物体的坐标表示方式根据坐标系的表达而变化，分为</p>
<ul>
<li>Cartesion : $(x,y,z)$</li>
<li>Cylindrical: $(\rho,\theta,\tau)$</li>
<li>Spherical: $(r,\theta,\phi)$<br>这是针对应用的场景而变化的，对于某些运动变化，采用适用的坐标系能大大简化问题，适应与问题。</li>
</ul>
<p>首先来讨论用<strong>三个角</strong>来表示旋转，分别是yaw,roll,hawl.$$R_{AB} = R_Z(\alpha).R_Y(\beta).r_X(\gamma)$$<br>求解一系列矩阵运算之后，出现cp = 0 的时候，会出现<strong>奇异性</strong>(回头查google)的点，此时无法进一步计算（因为除0出错）,无法进行继续跟踪，而其他以三个参数为旋转的也无法解决这个奇异点的问题。于是尝试进行四个参数的旋转表达，便有了经典的<strong>欧拉角</strong>，Euler Prameters。</p>
<p>欧拉角指根据x,y,z轴旋转，一共有24种顺规，使用前先确定规则，</p>
<h4 id="4-DH_u53C2_u6570"><a href="#4-DH_u53C2_u6570" class="headerlink" title="4.DH参数"></a>4.DH参数</h4><p>引入了“蜂鸟”机器人，如何通过连杆和终端执行器控制机械手，建立正运动学。用DH参数描述来表达对连杆的控制，，从而精确定义坐标系，设置不同参数进行变换得到总的变换，从而建立正运动学</p>
<h4 id="5-_u4EFF_u7075_u957F_u7C7B_u673A_u68B0_u81C2"><a href="#5-_u4EFF_u7075_u957F_u7C7B_u673A_u68B0_u81C2" class="headerlink" title="5.仿灵长类机械臂"></a>5.仿灵长类机械臂</h4><p>介绍了如何用欧拉角进行坐标转换，对ROBOT建立数学模型。<br>首先选定较优的坐标原点，尽量方便表达和减少参数，进而根据连杆的变换推导出新的节点的坐标表达，建立坐标表达矩阵，这样的坐标表达就包括（yaw,hawl,roll,Distance)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_u6982_u8FF0"><a href="#1-_u6982_u8FF0" class="headerlink" title="1.概述"></a>1.概述</h3><p>这门课程主要讲述机器人的一些基本知识，包括运动学，动力学，机臂控制，一些前沿研究。<]]>
    </summary>
    
      <category term="公开课" scheme="https://csrjtan.github.io/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SLAM的学习总结]]></title>
    <link href="https://csrjtan.github.io/2015/11/08/SLAM%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://csrjtan.github.io/2015/11/08/SLAM的学习总结/</id>
    <published>2015-11-08T09:31:46.000Z</published>
    <updated>2015-11-09T13:54:49.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u597D_u4E45_u6CA1_u66F4_u65B0_u4E86_uFF0C_u6700_u8FD1_u786E_u5B9E_u4E1C_u897F_u6709_u70B9_u591A_u6709_u70B9_u4E71_uFF0C_u5FC5_u8981_u7684_u8D76_u7D27_u6765_u603B_u7ED3_u4E00_u4E0B_u4E86"><a href="#u597D_u4E45_u6CA1_u66F4_u65B0_u4E86_uFF0C_u6700_u8FD1_u786E_u5B9E_u4E1C_u897F_u6709_u70B9_u591A_u6709_u70B9_u4E71_uFF0C_u5FC5_u8981_u7684_u8D76_u7D27_u6765_u603B_u7ED3_u4E00_u4E0B_u4E86" class="headerlink" title="好久没更新了，最近确实东西有点多有点乱，必要的赶紧来总结一下了"></a>好久没更新了，最近确实东西有点多有点乱，必要的赶紧来总结一下了</h4><h3 id="u5173_u4E8ESLAM_u7684_u5B66_u4E60"><a href="#u5173_u4E8ESLAM_u7684_u5B66_u4E60" class="headerlink" title="关于SLAM的学习"></a>关于SLAM的学习</h3><p>首先，参考学习了很多关于SLAM的内容，从理论、研究到开源软件甚至于开源的调用库都知道不少，奈何自己在这方面确实尚浅，走了不少弯路。</p>
<h4 id="SLAM_u662F_u5373_u65F6_u5B9A_u4F4D_u548C_u5730_u56FE_u6784_u5EFA"><a href="#SLAM_u662F_u5373_u65F6_u5B9A_u4F4D_u548C_u5730_u56FE_u6784_u5EFA" class="headerlink" title="SLAM是即时定位和地图构建"></a>SLAM是即时定位和地图构建</h4><p>分为前后端，前端为点云的叠加构建地图，后端为根据位置和移动建图，并用非线性全局优化来修正叠加误差以及进行回环检测。（旧的方法还有涉及EKF的KALMAN滤波，但随着图增大算法会吃不消）</p>
<h4 id="u4E3B_u8981_u7684FrameWork_3A"><a href="#u4E3B_u8981_u7684FrameWork_3A" class="headerlink" title="主要的FrameWork:"></a>主要的FrameWork:</h4><p>1.通过RGB+D，反算三角原理计算得到空间坐标系上的点云<br>2.通过提取特征点和特征点匹配求出转换矩阵，从而将点云合并<br>3.将摄像机位置作为位姿顶点，转换矩阵作为转换边，得到图G(V,E)<br>4.利用位置叠加全局优化图G，这是非线性优化的过程</p>
<h4 id="u4F18_u5316_u6570_u5B66_u6A21_u578B_uFF1A"><a href="#u4F18_u5316_u6570_u5B66_u6A21_u578B_uFF1A" class="headerlink" title="优化数学模型："></a>优化数学模型：</h4><p>模型定义：<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/slam_1.png" alt=""><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/slam_2.png" alt=""><br>其中 $$Mothion: x_p^{x+1} = f(x_p^i,u_i)+w_i$$<br>$$Observations: z_{i,j} = h(x_p^i,x_L^j)+v_{i,j}$$<br>求解SLAM前，我们有$u_i,z_{i,j}$分别代表传感器量度以及传感器误差，我们要求$x_p，x_L$<br>继而误差就是等式左右相减，我们目的用最小二乘全局最优化以下式子：<br>$$min \phi=\sum_i(e_p^i)^2+\sum_{i,j}(e_L^{i,j})^2$$<br>所以这是一个<strong>非线性和非凸</strong>问题,可以通过估计一个起始猜测，然后寻找各个方向上的雅克比和Hessian矩阵进行牛顿迭代等非线性优化方法。由于G的结构是稀疏的，所以可以对SLAM的全局非线性优化进行稀疏求解。（如Sparse Cholesky Decomposition）</p>
<p>这里可以利用到的一些工具包括：ROS、OctoMap、SiftGPU、OpenGL,opencv、eigen、<strong>pcl、g2o</strong>等等</p>
<p>可以看的书《Multiple View Geometry in CV》和《线性代数该这样读》，还有很多资源，参考下面的LINK，三个阶段：1.基础理论工具学习 2.执行别人的代码和阅读论文 3.阅读并改写改进，突破发论文</p>
<p>这里放一些有用的网站：<br><a href="http://blog.csdn.net/heyijia0327/article/details/47813405" target="_blank" rel="external">Graph Slam Tutorial:g2o</a></p>
<p><a href="http://vision.in.tum.de/data/datasets/rgbd-dataset" target="_blank" rel="external">Computer Vision Group RGB-D SLAM</a></p>
<p><a href="http://www.cnblogs.com/gaoxiang12/p/4633316.html" target="_blank" rel="external">一起做RGB-D SLAM系列</a></p>
<p><a href="http://www.zhihu.com/question/35186064" target="_blank" rel="external">知乎</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u597D_u4E45_u6CA1_u66F4_u65B0_u4E86_uFF0C_u6700_u8FD1_u786E_u5B9E_u4E1C_u897F_u6709_u70B9_u591A_u6709_u70B9_u4E71_uFF0C_u5FC5_u8981_]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据挖掘导论（3）]]></title>
    <link href="https://csrjtan.github.io/2015/11/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AF%BC%E8%AE%BA%EF%BC%883%EF%BC%89/"/>
    <id>https://csrjtan.github.io/2015/11/02/数据挖掘导论（3）/</id>
    <published>2015-11-02T11:26:19.000Z</published>
    <updated>2015-11-03T06:46:26.000Z</updated>
    <content type="html"><![CDATA[<p>何女神，准备就期中考了，考到第7章，我有空继续看，顺便完善一下读书笔记，做人要有始有终。</p>
<h4 id="u56DE_u987E_u4E0A_u8282"><a href="#u56DE_u987E_u4E0A_u8282" class="headerlink" title="回顾上节"></a>回顾上节</h4><p>提到了决策树的生成，主要是选择合理的分裂属性，并且修正合理的生成树，以获得较少的训练误差和不会过于臃肿的树结构，基于Occam’s Razor Rules，这有利于更强的泛化和预测能力。</p>
<h3 id="u7B2C_u4E94_u7AE0"><a href="#u7B2C_u4E94_u7AE0" class="headerlink" title="第五章"></a>第五章</h3><p>这一章包含的内容多且重要，然而书本没有详细展开，这里我还是得仔细记录每一小节的内容。</p>
<h4 id="5-1_u57FA_u4E8E_u89C4_u5219_u7684_u5206_u7C7B_u5668"><a href="#5-1_u57FA_u4E8E_u89C4_u5219_u7684_u5206_u7C7B_u5668" class="headerlink" title="5.1基于规则的分类器"></a>5.1基于规则的分类器</h4><p>分类模型用析取范式 $R=(r_1 \bigvee r_2 \bigvee … \bigvee r_k)$<br>这里R成为<strong>规则集</strong><br>这里表示形式：$r_i:(条件_i)-&gt;y_i$<br>这里左边称为规则前提，右边为规则后件，包含预测结果。<br>分类规则的质量用覆盖率和准确率定义,D为数据集，A为规则前件，y为规则后件。<br>$$Converage（r) = \frac{|A|}{|D|}$$<br>$$Accuray(r)=\frac{|A\bigcap y|}{|A|}$$<br>基于定义，我们有<strong>互斥规则、穷举规则、有无序规则</strong></p>
<p>由于规则集中的规则不一定是互斥的，所有有可能分类的时候某条记录会属于多个类（也就是说某条记录会同时触发规则集中的超过1条的过则，而被触发的规则的类标号也不一样），这种情况有两种办法解决。<br>(1）有序规则。将规则集中的规则按照优先级降序排列，当一个测试记录出现时，由覆盖记录的最高秩的规则对其进行分类，这就避免由多条分类规则来预测而产生的类冲突问题<br>(2）无序规则。允许一条测试记录触发多条分类规则，把每条被触发规则的后件看作是对相应类的一次投票，然后计票确定测试记录的类标号。通常把记录指派到得票最多的类。</p>
<p>假设现在有一个记录它不能触发规则集合中的任何一个规则，那么它该如何就行分类呢？解决办法也有两个：<br>（1）穷举规则。如果对属性值的任一组合，R中都存在一条规则加以覆盖，则称规则集R具有穷举覆盖。这个性质确保每一条记录都至少被R中的一条规则覆盖。<br>(2）如果规则不是穷举的，那么必须添加一个默认规则rd：（）-&gt;yd来覆盖那些未被覆盖的记录。默认规则的前件为空，当所有其他规则失效时被触发。yd是默认类，通常被指定为没有被现存规则覆盖的训练记录的多数类.</p>
<p><strong>顺序覆盖算法</strong></p>
<pre><code>令E是训练记录，A是属性-值对的集合{（Aj,Vj）}
令Y0是类的有序集{y1,y2,...,yk}
令R={}是初始规则列表
for 每个类y in Y0-{yk} do
    while 终止条件不满足 do
        r = Learn-One-Rule(E,A,y)
        从E重删除被r覆盖的训练记录
        追加r到规则列表尾部:R=R V r
    end while
end for
把默认规则{}-&gt;yk插入到规则列表R尾部
</code></pre><p>这里是直接方法里的Learn-One-Rule函数，采用贪心原则。因为要找最佳规则是个NP-HARD问题，通过贪心方式近似，先产生一个初始规则r,不断求精，然后满足某种终止条件，修剪规则以改进泛化误差。书中介绍了规则增长的策略，这里不详述。</p>
<p>对于候选规则的选择，这里使用<strong>似然比</strong>作为统计量：<br>$$R=2\sum_{i=1}^kf_ilog(\frac{f_i}{e_i})$$<br>或者规则覆盖率的度量Laplace以及<strong>FOIL信息增益</strong><br>(在顺序覆盖算法中，需要删除覆盖到的训练记录，不然会重叠而误选。)可以使用<strong>RIPPER算法</strong>来建立规则集，而选取一个泛化能力较佳的模型。</p>
<h4 id="u8DDF_u51B3_u7B56_u6811_u6BD4_u8F83"><a href="#u8DDF_u51B3_u7B56_u6811_u6BD4_u8F83" class="headerlink" title="跟决策树比较"></a>跟决策树比较</h4><p>可以看到与决策树的相似性，这里我们可以用决策树作为参考，间接产生规则。<br>它们间的比较：</p>
<ul>
<li>规则集表达能力与之等价</li>
<li>基于规则分类器更易于解释，并性能相媲美</li>
<li>基于类的规则定序非常适应处理类分布不平衡的数据集</li>
</ul>
<h4 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h4><p>算法思想：先从训练集生成规则集合，用合取条件表示。对每个待分类的记录和规则集合中的规则进行比较，如果某条规则被触发，则记录被分类。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>何女神，准备就期中考了，考到第7章，我有空继续看，顺便完善一下读书笔记，做人要有始有终。</p>
<h4 id="u56DE_u987E_u4E0A_u8282"><a href="#u56DE_u987E_u4E0A_u8282" class="headerlink" t]]>
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
