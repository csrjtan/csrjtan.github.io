<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CSRJTAN]]></title>
  <subtitle><![CDATA[Keep Moving]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://csrjtan.github.io/"/>
  <updated>2016-06-01T11:40:29.000Z</updated>
  <id>https://csrjtan.github.io/</id>
  
  <author>
    <name><![CDATA[CsrjTan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[书单]]></title>
    <link href="https://csrjtan.github.io/2016/06/01/books/"/>
    <id>https://csrjtan.github.io/2016/06/01/books/</id>
    <published>2016-06-01T11:28:07.000Z</published>
    <updated>2016-06-01T11:40:29.000Z</updated>
    <content type="html"><![CDATA[<p>这里记录一下书单，包括在读的、想读的、他人推荐读的。后面可以写一下正在进展的项目和工作，最后记录已读的。</p>
<h2 id="在读："><a href="#在读：" class="headerlink" title="在读："></a>在读：</h2><p>《影响力》、《MATLAB从入门到精通》</p>
<h2 id="想读："><a href="#想读：" class="headerlink" title="想读："></a>想读：</h2><h3 id="面试微软之前的十本书"><a href="#面试微软之前的十本书" class="headerlink" title="面试微软之前的十本书"></a>面试微软之前的十本书</h3><p>Code: The Hidden Language of Computer Hardware and Software （《编码的奥秘》）<br>Computer System: A Programmer’s Perspective （《深入理解计算机系统》） / Windows via C/C++ （《Windows核心编程》 / 《程序员的自我修养》<br>Code Complete 2（《代码大全》）/ The Pragmatic Programmer （《程序员修炼之道》，我也把这本书称为《代码小全》）<br>Programming Pearls （《编程珠玑》） / Algorithms / Algorithm Design / 《编程之美》<br>The C Programming Language<br>The C++ Programming Language / Programming: Principles and Practice Using C++ / Accelerated C++<br>The Structure and Interpretation of Computer Programs （《计算机程序的构造和解释》）<br>Clean Code / Implementation Patterns<br>Design Patterns （《设计模式》） / Agile Software Development, Principles, Patterns, and Practices<br>Refactoring （《重构》）</p>
<h3 id="云风推荐"><a href="#云风推荐" class="headerlink" title="云风推荐"></a>云风推荐</h3><p>C++编程思想<br>Effective C++<br>深度探索C++对象模型<br>C++语言的设计和演化<br>C专家编程<br>C陷阱与缺陷<br>C语言接口与实现<br>Lua程序设计<br>Linkers and Loaders<br>COM本质论<br>Windows核心编程<br>深入解析Windows操作系统<br>程序员修炼之道<br>代码大全<br>UNIX编程艺术<br>设计模式<br>代码优化：有效使用内存<br>深入理解计算机系统<br>深入理解LINUX内核<br>TCP/IP 详解</p>
<h3 id="冯大辉"><a href="#冯大辉" class="headerlink" title="冯大辉"></a>冯大辉</h3><p>软件随想录<br>黑客与画家<br>重来<br>UNIX编程艺术<br>编程人生</p>
<h3 id="豆瓣CTO"><a href="#豆瓣CTO" class="headerlink" title="豆瓣CTO"></a>豆瓣CTO</h3><p>Code Complete 2<br>The Mythical Man-Month （《人月神话》）<br>Code: The Hidden Language of Computer Hardware and Software （《编码的奥秘》）<br>TAOCP （不解释）<br>The Pragmatic Programmer （《程序员修炼之道》）<br>Design Patterns （《设计模式》）<br>The Structure and Interpretation of Computer Programs （《计算机程序的构造和解释》）<br>Refactoring （《重构》）<br>The C Programming Language<br>Introduction to Algorithms （《算法导论》）</p>
<h2 id="已读："><a href="#已读：" class="headerlink" title="已读："></a>已读：</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>《统计学习方法》、《这就是搜索引擎》、《浪潮之巅》、《数学之美》</p>
<h3 id="非技术"><a href="#非技术" class="headerlink" title="非技术"></a>非技术</h3><p>《苏菲的世界》、《如何阅读一本书》、《黑客与画家》、《解忧杂货铺》、《当我在跑步，我在谈论什么》、《白夜行》、《一个人的朝圣》、《人性的弱点》、《从0到1》、《35岁前要做的33件事》、《站在两个世界的边缘》、《极简欧洲史》、《未来在现实的第几层》、《再穷也要去旅游》、《活着》、《小王子》</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里记录一下书单，包括在读的、想读的、他人推荐读的。后面可以写一下正在进展的项目和工作，最后记录已读的。</p>
<h2 id="在读："><a href="#在读：" class="headerlink" title="在读："></a>在读：</h2><p>《影响力》、]]>
    </summary>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[潮汕之旅&拼图合照]]></title>
    <link href="https://csrjtan.github.io/2016/05/30/%E6%BD%AE%E6%B1%95%E4%B9%8B%E6%97%85/"/>
    <id>https://csrjtan.github.io/2016/05/30/潮汕之旅/</id>
    <published>2016-05-30T06:47:13.000Z</published>
    <updated>2016-06-01T14:49:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Seminar-Report"><a href="#Seminar-Report" class="headerlink" title="Seminar Report"></a>Seminar Report</h3><p>理大上学期的十个Seminar Report的1500 words的总结<br><a href="https://drive.google.com/file/d/0B5mtSYlvfwArMVAzblpPZjRRNmM/view" target="_blank" rel="external">Seminar Report</a><br>买设备的单据<br><a href="https://drive.google.com/drive/folders/0B5mtSYlvfwArbDI2N1lIdlFpZ0U" target="_blank" rel="external">电脑单据</a></p>
<h3 id="潮汕"><a href="#潮汕" class="headerlink" title="潮汕"></a>潮汕</h3><p>在深圳工作了一会儿了，周末借着万圣节的假期和珊爷出去玩，由于港客特别多放假，珠海长隆和周边的温泉都爆满了，所以决定去潮汕享受一下美食。结果却累得不行，时间不够，交通紧张，没有领略到什么旅游的特色，倒是和珊宝确实走了更多的路了。</p>
<p>去了两天，住在状元街周边的旅店，总体感觉消费也不低，但人确实有点凶，不大适合旅游，受到小明的建议，决定到此体验一下潮汕的文化和美食。毕竟大学堆里有不少潮汕的朋友，这有利于了解他们的生活方式。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053001.jpg?imageView2/2/w/400/q/90" alt="潮州状元坊"><br><a id="more"></a><br>这个状元坊就是当年的秀才考取功名，衣锦还乡而建的，一条街证明大家都是为了这个奋发，读书走这条路为的就是衣锦还乡呀。所以潮汕的教育应该还是很不错，相对来说还是比较重视教育和后代的，所以才会出现那么严重的超生、重男轻女之类的，确实很有趣。现在珠三角的年轻人群体不乏潮汕群体，而且公司和大学也很多，所以这个地方还是值得去了解一下，遗憾的是时间不够，没有去到汕头。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053002.jpg?imageView2/2/w/400/q/90" alt="潮汕牛肉面"><br>潮汕的牛肉丸、牛杂和牛肉面自然是不容错过的，只是感觉味精有点多，不适合我这种传统顺德口味。回来还发烧和嘴巴发炎了，太上火了，以致于现在的口味也趋向清淡了。也应了年轻的时候轻狂，过了这段也就归于本性；年轻的时候爱吃辣，过了就知道自己自小的培养起来的口味和体质，还是趋于清淡。（家里人的口味和小珊的口味熏陶了我）。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053003.jpg?imageView2/2/w/400/q/90" alt="驸马府"><br>在潮汕很多那些电动三轮，虽然导致交通阻塞，但却很受用，上了一个把驸马府、西湖都转了个遍，毕竟潮州的景点也不大。所以在这儿当了一回驸马，了解了很多潮州以及华南地区的建筑格局和模式。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053004.jpg?imageView2/2/w/400/q/90" alt="芝麻茶和杏仁茶"><br>其实就是糊，不过口味还挺不错的，值得一试。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053006.jpg?imageView2/2/w/400/q/90" alt="广济桥合照"><br>这是历史已久的桥，后来李嘉诚斥巨资翻修，很多的潮汕人漂洋过海谋求发展，功成名就就帮助建设家乡，汕头大学也是因此受惠不少。奈何潮州这个地区好像经济发展还是比较颓势，新城区可能还好一些吧。</p>
<p>总结：这趟旅程只有两天但其实有点时间不足，交通上耗时较多，到旅游点后也没有了解和玩到太多的东西，要多加锻炼自己的策划能力，看了很多的攻略但没有地图确实还是不好弄，只有手机软件还是不够用的。需要做好手绘地图攻略，合理安排好时间出行。特别找饭店这个好像一直都不大重视，但食是旅游中十分重要的一件事情。下次改进吧。</p>
<h3 id="拼图合照"><a href="#拼图合照" class="headerlink" title="拼图合照"></a>拼图合照</h3><p>这里把lofter和手机拼图都放在一起了，有空可以怀缅一下。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053005.jpg?imageView2/2/w/400/q/90" alt="可爱的人"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053007.jpg?imageView2/2/w/400/q/90" alt="大四时光"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053008.jpg?imageView2/2/w/400/q/90" alt="合照"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053009.jpg?imageView2/2/w/400/q/90" alt="哥哥大婚"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Seminar-Report"><a href="#Seminar-Report" class="headerlink" title="Seminar Report"></a>Seminar Report</h3><p>理大上学期的十个Seminar Report的1500 words的总结<br><a href="https://drive.google.com/file/d/0B5mtSYlvfwArMVAzblpPZjRRNmM/view">Seminar Report</a><br>买设备的单据<br><a href="https://drive.google.com/drive/folders/0B5mtSYlvfwArbDI2N1lIdlFpZ0U">电脑单据</a></p>
<h3 id="潮汕"><a href="#潮汕" class="headerlink" title="潮汕"></a>潮汕</h3><p>在深圳工作了一会儿了，周末借着万圣节的假期和珊爷出去玩，由于港客特别多放假，珠海长隆和周边的温泉都爆满了，所以决定去潮汕享受一下美食。结果却累得不行，时间不够，交通紧张，没有领略到什么旅游的特色，倒是和珊宝确实走了更多的路了。</p>
<p>去了两天，住在状元街周边的旅店，总体感觉消费也不低，但人确实有点凶，不大适合旅游，受到小明的建议，决定到此体验一下潮汕的文化和美食。毕竟大学堆里有不少潮汕的朋友，这有利于了解他们的生活方式。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CS053001.jpg?imageView2/2/w/400/q/90" alt="潮州状元坊"><br>]]>
    
    </summary>
    
      <category term="旅游 美食" scheme="https://csrjtan.github.io/tags/%E6%97%85%E6%B8%B8-%E7%BE%8E%E9%A3%9F/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重回理大]]></title>
    <link href="https://csrjtan.github.io/2016/05/29/%E9%87%8D%E5%9B%9E%E7%90%86%E5%A4%A7/"/>
    <id>https://csrjtan.github.io/2016/05/29/重回理大/</id>
    <published>2016-05-29T05:18:43.000Z</published>
    <updated>2016-06-01T14:27:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="在深圳最后一周"><a href="#在深圳最后一周" class="headerlink" title="在深圳最后一周"></a>在深圳最后一周</h3><p>从今年的3月中旬去到了相机部门里面去实习，认识了很多牛人，迄今为止一次在公司里比较真切完整的体验，几乎足足有三个月。（不想说有多苦，宝宝心里苦，宝宝认真上班）总结来说并没有进步很多，但确实学到不少，企业的管理模式，内部沟通机制，安全机制等，我住在新安的宿舍，每天上班需要40分钟，过着早上10点上班，中午12点半点外卖，午休到2点，晚饭6点吃完，7点休息聊天看书，8点回去散漫工作的日子。虽然紧张，但规律有节奏的生活带来的好处却是有目共睹的。很庆幸认识了共同入职的新伙伴，陪我度<a id="more"></a>过了这段富有意义的旅程。遗憾的是没有想象中的那样学到很多很有意义的东西，一方面是自己实力或者积极性不够的原因，一方面也是公司内部管理以及机密性原因，对实习生确实不能太坦诚相对。这是一家非常棒的公司，拥有非常棒的员工，大家工作节奏快而有效，虽然缺少一些生活的气息，但已经感觉到他们的工作与生活是无法割离的。这样的长时间工作带来了高薪但却缺少了个人娱乐以及陪伴家人的时间（其实还是有的，主要是在周末吧）。不得不说这段岁月过得飞快，每天都能拿出绝大部分的时间放在技术、代码上，这才是应该要有的学习和进步的态度，希望自己能保持。</p>
<p>这最后一周本来还不想离去，但我家的小珊考完期末试，没人陪她玩，愣是过来骚扰我了，于是我就白天上班，晚上陪她去了。周二的第一天我们去了创维大厦的藕厨，点了个番茄鱼。继水煮鱼和番茄鱼之后，又刷新我世界观的🐟。还有肉团和爆炒娃娃菜，我家宝宝是有多爱吃娃娃菜~第二天去了COCO PARK，为了吃到她朋友SHOW的美奈小馆，一个吃非常FRESH的越南菜的馆子，还等了几乎一个小时，肚子又要快饿扁了，真希望能健康按时地作息。接下来秀一下拍的FRESH越南菜美食：<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052901.jpg?imageView2/2/w/300/q/90" alt="宝宝试衣">这个衣服还是跟宝宝很配的，宝宝的穿衣审美一直希望尝试新风格突破自我，所以经常想尝试欧美风，奈何骨架太小，人还偏瘦，想穿衣好看，就得吃饭。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052905.jpg?imageView2/2/w/300/q/90" alt="薄荷紫苏柠七">还有如此清新可口的饮料<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052902.jpg?imageView2/2/w/300/q/90" alt="绿豆糕">还行，但太黏了，不及我二姑妈做的呀！<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052904.jpg?imageView2/2/w/300/q/90" alt="越南春卷">野味，唯一一个比较多肉的，满足我食肉兽欲望的菜式<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052903.jpg?imageView2/2/w/300/q/90" alt="招牌越南寿司">感觉不到好味之处，只是各种酸甜香辣还有些芒果肉混在其中，这就是越南菜让人回味的特点。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052906.jpg?imageView2/2/w/300/q/90" alt="美奈小馆"><br>最后一晚去了科技园旁边的一个西餐厅，点了双人套餐，吃了两份大扒还有自助，吃得也是够称的，那块香喷喷的牛肋确实是值得再尝，8分熟旁边拌上椒盐和蛋黄酸甜汁，好吃到不要不要的。还带宝宝第一次体验了一下沐足，确实有点玩过头了，回去要好好工作了！</p>
<h3 id="重回理大"><a href="#重回理大" class="headerlink" title="重回理大"></a>重回理大</h3><h4 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h4><p>早上：回到学校的感觉真好，劳累了两个多月，是要好好做些喜欢的事情，比如说看个球什么的，今年常规赛勇士太猛，在81场常规赛里拿到了73场胜利，破了当年乔丹带领的公牛队的联盟记录。库里也大丰收，拿到了常规赛MVP，常规赛三分球也破了联盟记录了，可谓了人在巅峰的丰收年了，上一年拿到了总冠军，今年不知道是否也能冲击卫冕。早上起来看的是热火对阵猛龙，不得不说今年猛龙确实进步神速，双枪德罗赞和小钢炮罗瑞发挥出色，高歌挺进了东决，奈何詹姆斯、欧文和勒夫三巨头的骑士融合得和谐有节奏，事实上还是差距许多，特别赞许今年詹姆斯的球风和领袖气质日趋成熟稳重，主动的助攻和分球，使得除了猛龙的两场发挥出色的比赛，可谓一路在季后赛上无人能挡的，冲击总冠军的势头也是十分的猛。詹姆斯的身体素质和技术还是十分的强悍，联盟第一人确实不是儿戏，基本上两个人也防不住，看的这一场三巨头基本上也是三双，早早就结束悬念了。</p>
<p>中午：PolyU的Research OpenDay,看到老师和同学们在展厅展示的DEMO，有分布式机器人阵列、老姐的云计算、我们的深度场景重建和辉辉的HDR；大张组的生物识别类的根据呼吸检查糖尿病、掌纹特征打卡、根据舌头识别之类的；一些基于社交信息的数据挖掘、手势控制飞机、游戏等等，看到高校里丰富多彩的应用也是欣喜十足，回来继续做学术的感觉也是真好。下午和新栋、刘日升老师一起去射射篮，单挑一下。</p>
<p>晚上： 研究了一下HEXO，缘起看到中大师兄小土刀的博客，感觉自己也应该记录一下生活，多花点生活记录每一点点滴，可以看到自己的人生轨迹，也在写作中不断沉淀思考，做更好的自我吧。把分类和图片设置大小的做起来，七牛那可以帮助把图片设成对应所需要的大小,用<a href="http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html" target="_blank" rel="external">imageView2</a>:<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">imageView2/<span class="params">&lt;mode&gt;</span><span class="meta-keyword">/w/</span><span class="params">&lt;LongEdge&gt;</span></span><br><span class="line">                 <span class="meta-keyword">/h/</span><span class="params">&lt;ShortEdge&gt;</span></span><br><span class="line">                 <span class="meta-keyword">/format/</span><span class="params">&lt;Format&gt;</span></span><br><span class="line">                 <span class="meta-keyword">/interlace/</span><span class="params">&lt;Interlace&gt;</span></span><br><span class="line">                 <span class="meta-keyword">/q/</span><span class="params">&lt;Quality&gt;</span></span><br><span class="line">                 <span class="meta-keyword">/ignore-error/</span><span class="params">&lt;ignoreError&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h4><p>早上：好不容易8点钟爬起来了，想着好好学习，奈何雷霆对阵勇士的GAME6,现在雷霆几乎要淘汰勇士了，身为勇士的支持者，当然需要支持一下球队。这个系列赛可以看到二少的成长，球风趋于稳重，进攻侵略性不变之余，投篮和技术都在渐进，基本上可以称为联盟最强突破控卫了。雷霆这边一帮人等身体素质都是好得一比，各种篮底进攻，前场篮板球都是如探囊取物来着。反观勇士这边打得很累，各种掩护后依然没有出手空间，各种突破后屡遭封盖或者近距离投射但面对着大山大墙却命中不高。所幸的是今天汤神发挥又再超神，一记又一记的三分球帮勇士把命续到最好两分钟，两队打平。勇士下半场的三分手感火热，几乎没有投失，雷霆的篮底冲击和中投依然是十分稳定，两队不断飚分上扬，知道最后两分钟，汤神再来一记三分，最好11记三分拿到全场最高的41分还破了季后赛三分最多的联盟记录。雷霆士气关键时刻在主场士气反而有点低落，威少连续两个末节关键失误断送了在主场淘汰勇士的机会，最后一场抢七大战将会在勇士展开，我只想说主场优势还是很明显，这很可能是我想看到的最终骑士对阵勇士的大战，三巨头大战水花，两队的三分都是十分强劲，而骑士这边有詹姆斯相对来说，全队实力更为稳定和全面。</p>
<p>下午： 去整理一下以前的相片和文字，前移到HEXO这里来吧，在这里记录我的生活，展示我的人生，思考奋斗和调整我的方向<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052908.jpg?imageView2/2/w/300/q/90" alt="理大小广场的一角"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052909.jpg?imageView2/2/w/300/q/90" alt="理大校道"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life052910.jpg?imageView2/2/w/300/q/90" alt="设计大楼"><br>晚上： 约了宝宝大人一起去看五月天的演唱会，十分期待，相信一定是一个难忘的体验，第一场就是五月天了，肯定要挥泪青春岁月的节奏了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="在深圳最后一周"><a href="#在深圳最后一周" class="headerlink" title="在深圳最后一周"></a>在深圳最后一周</h3><p>从今年的3月中旬去到了相机部门里面去实习，认识了很多牛人，迄今为止一次在公司里比较真切完整的体验，几乎足足有三个月。（不想说有多苦，宝宝心里苦，宝宝认真上班）总结来说并没有进步很多，但确实学到不少，企业的管理模式，内部沟通机制，安全机制等，我住在新安的宿舍，每天上班需要40分钟，过着早上10点上班，中午12点半点外卖，午休到2点，晚饭6点吃完，7点休息聊天看书，8点回去散漫工作的日子。虽然紧张，但规律有节奏的生活带来的好处却是有目共睹的。很庆幸认识了共同入职的新伙伴，陪我度]]>
    
    </summary>
    
      <category term="感想" scheme="https://csrjtan.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Demosaic Comparison]]></title>
    <link href="https://csrjtan.github.io/2016/05/16/ColorDemosaicComparison/"/>
    <id>https://csrjtan.github.io/2016/05/16/ColorDemosaicComparison/</id>
    <published>2016-05-16T13:12:12.000Z</published>
    <updated>2016-06-01T14:50:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Demosaic-Comparison"><a href="#Demosaic-Comparison" class="headerlink" title="Demosaic Comparison"></a>Demosaic Comparison</h3><p>  进入公司2个月多了，对于ISP和Demosaic才刚起步，赶紧把CNN掌握好，做出点工作来吧！</p>
<p>总体来说， nnr和sht直接插值，锯齿感太强，Lu和NAT的方法效率不行，然后感觉AP和SA的PSNR虚高，实际效果不行。可以考虑测一下CPSNR和CIE L<em>a</em>b或者锯齿等其它指标。<br>  下面比较一下AP[1], SA,LCC1和DLMMSE[2], RI[3]的结果。</p>
<p>[1] SA, <a href="http://www.csee.wvu.edu/~xinl/demo/demosaic.html" target="_blank" rel="external">http://www.csee.wvu.edu/~xinl/demo/demosaic.html</a><br>[2] DLMMSE, Zhang L, Wu X. Color demosaicking via directional linear minimum mean square-error estimation[J]. Image Processing, IEEE Transactions on, 2005, 14(12): 2167-2178.<br>[3] RI, <a href="http://www.ok.ctrl.titech.ac.jp/res/DM/RI.html" target="_blank" rel="external">http://www.ok.ctrl.titech.ac.jp/res/DM/RI.html</a><br><a id="more"></a><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/CDC-5281.jpg" alt=""></p>
<p><img src="http://7xl4js.com1.z0.glb.clouddn.com/CDC-5282.jpg" alt=""></p>
<p><img src="http://7xl4js.com1.z0.glb.clouddn.com/CDC-5283.jpg" alt=""></p>
<h3 id="结果总结"><a href="#结果总结" class="headerlink" title="结果总结"></a>结果总结</h3><p>总体来说，这些方法都在大部分地方插值准确，肉眼不容易区分，都没有发现有锯齿等明显不和谐区域的出现。主要是在变化剧烈的边缘和光亮变化强的区域出现Artifacts。时间上以SA、AP、LCC1、RI占优，效果上以DLMMSE和RI最优。<br>从实现来说LCC1是简单高效的，AP做了一个映射也是可以的，DLMMSE主要做了PCA的分解，SA是有迭代的求解，RI有待进一步学习。</p>
<h3 id="ImageJ"><a href="#ImageJ" class="headerlink" title="ImageJ"></a>ImageJ</h3><p>看了不少的论文和代码了，及时地来总结一下吧，马上又要开展对于DL的学习了。先来ImageJ的吧？把JAva各个类和用例都看了，然而并没有派上用场，所以应该吸取教训，先学足够的，马上就用。不然看完也没有机会用，看完也用不上，看完也还是不会用，对于CODING这样的事情来说就是实用至上，不断使用行动，付出并成为一种习惯，从而变成一种轻松的反射或者习惯，最后培养成为爱好。ImageJ主要是一个科学图像的小插件，由JAVA框架开发，可以不依赖系统，自带JRE。一般分为MARCRO,SCRIPTS等，做些命令脚本批量处理之类的。系统自带功能包括图像基本操作、处理和分析，强大之处在于用户可以开发插件Plugin快速量身定做图像处理工具。</p>
<p>Plugin分为普通plugin，图片filter plugin以及堆 stack plugin。先setup了，获得指定图片类型后，然后用run()方法对读入的图片进行处理。总体还是看一下一本图像处理ImageJ实战和ImageJ手册吧，要用就回头去看一下。现在先放一放ImageJ吧，主力还是在Matlab和MatConv,高层的调用可以帮助开发者在思维和方法层面上更专注，不然用c和c++这样的还是需要花费力气在数据结构和指针，语言组织上，确实吃力不讨好的事情。</p>
<h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><p>   再者说一下关于ISP的流程吧，进来后发现组里是做相机的，包括从硬到软的各个层面，硬件-&gt;FPGA-&gt;嵌入式-&gt;图像算法-&gt;IQ等等。这里说一下相机出图的ISP流程，从RAW到用户看到的JPEG： RAW-&gt;BLC-&gt;LSC-&gt;AWB-&gt;DEMOSAIC-&gt;DENOISE-&gt;CC-&gt;GAMMA-&gt;JPEG，里面每个算法和相机原理都是进来才学习了解到的。希望对以后有用。</p>
<h3 id="Demosaic"><a href="#Demosaic" class="headerlink" title="Demosaic"></a>Demosaic</h3><p>   然后回到今天要记录的重点，Demosaic的papers和学习总结：首先看了Comparison和Survey这两篇关于去马赛克发展的重要文章，科普了不少要点：比如说如何用空间相关信息和谱间相关信息来恢复Downsample后的信息，讲述了主要包括空域和谱域的方法，color ratio and color difference的基本假设。空域上利用插值，bilinear以及梯度适应的adaptive gradient interpolation，还有转到其他频域如傅里叶和小波上面去做滤波的，根据不同频段的相关性来进行近似恢复。这里着重说一下影响力比较高的文章，首先是Alternating Projection：将谱间的强相关性信息映射到一个POCS(Project onto convex set）里面，然后求解convex问题得到一个较优的像素解来作为插值。然后是Succesive Approximate是将谱间差值的difference变成一个由局部迭代成局部最优的过程，先从简单的插值后，然后迭代更新color difference从而到达局部较优的位置。SSD是利用增强自相关性，还没仔细了解。还有利用非局部相似块的方法，如定义Non-local Similarity，如果它表达的相关性（梯度小）比当前块强，则用该块作为当前块的插值结果。然后我老板的两个比较突破性的论文：DLMMSE提出了去马赛克噪声，然后引入去噪模型，转换成求解最优color difference的方法，里面有些数学证明还待细看，该工作直接把PSNR提高了5db。后来的LDI_NAT也是经过LDI的梯度插值后，然后使用PCA的方法分解构造出sparse模型，从而去掉artifacts. 再后来的方法就包括一些sparse模型，dictionary learning，tv等，还有Tokyo Insitute 的RI方法，利用残差的方法，快速有效进行去马赛克。</p>
<h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>   后面用凯爷的网络跑了一下CNN的结果，目测要比Tokyo Institute的RI要好，这里用的是5层卷积神经网络，使用柯德IQA的库中500多张图片作为TrainingSets,Kodak的24张图作为TestSets，使用的是MatconvNet的框架。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Demosaic-Comparison"><a href="#Demosaic-Comparison" class="headerlink" title="Demosaic Comparison"></a>Demosaic Comparison</h3><p>  进入公司2个月多了，对于ISP和Demosaic才刚起步，赶紧把CNN掌握好，做出点工作来吧！</p>
<p>总体来说， nnr和sht直接插值，锯齿感太强，Lu和NAT的方法效率不行，然后感觉AP和SA的PSNR虚高，实际效果不行。可以考虑测一下CPSNR和CIE L<em>a</em>b或者锯齿等其它指标。<br>  下面比较一下AP[1], SA,LCC1和DLMMSE[2], RI[3]的结果。</p>
<p>[1] SA, <a href="http://www.csee.wvu.edu/~xinl/demo/demosaic.html">http://www.csee.wvu.edu/~xinl/demo/demosaic.html</a><br>[2] DLMMSE, Zhang L, Wu X. Color demosaicking via directional linear minimum mean square-error estimation[J]. Image Processing, IEEE Transactions on, 2005, 14(12): 2167-2178.<br>[3] RI, <a href="http://www.ok.ctrl.titech.ac.jp/res/DM/RI.html">http://www.ok.ctrl.titech.ac.jp/res/DM/RI.html</a><br>]]>
    
    </summary>
    
      <category term="paper Demosaic" scheme="https://csrjtan.github.io/tags/paper-Demosaic/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ted《光荣与梦想》]]></title>
    <link href="https://csrjtan.github.io/2016/04/21/ted-glories-and-dream/"/>
    <id>https://csrjtan.github.io/2016/04/21/ted-glories-and-dream/</id>
    <published>2016-04-21T08:48:13.000Z</published>
    <updated>2016-06-01T14:52:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="特奥会冠军讲解智障人士生活"><a href="#特奥会冠军讲解智障人士生活" class="headerlink" title="特奥会冠军讲解智障人士生活"></a>特奥会冠军讲解智障人士生活</h3><p>首先看完一个感动的TED TALK，关于社会对智障人士的看法，一位特奥会的冠军以身作则提及他们的生活，受歧视，然特奥会提供了一个平台，展示属于他们生命的价值，他们的梦想和他们的尊严。相比于我们，诚然他们的舞台太小，但我们应该看到他们所作的努力。对于自己，四肢健全，家庭幸福安康，应该有更多的理由去追逐幸福，有时候不要一直想着缺少的，应该惦记自己所拥有的，记得感恩。并去勇敢自信的追逐自己所想所求，不要害怕失败，不要害怕别人的目光，勇敢的be yourself.虽然那可能不容易，但人生只有一次，时间是宝贵的<a id="more"></a>，追逐自己所看重的东西吧。成长在于做减法，在于专注，努力。奉献，寻找自己的价值，承担应有的价值。看到了不丹的视频，信仰让他们满足，与自然的好好相处让他们轻松。自己看得多可能欲望也多，但有时候压抑一下自己的欲望，追逐真正渴求的，也是一种成熟，我不知道是否经历过才算真的看透，但有些事情觉得经历了也不一定幸福，所以还是应该保有自己，一直是不断地思考迷茫，殊不知其实自己静不下来，无法专注于自己的学业。我认为应当认真一丝不苟地完成自己的任务，才是最大的意义，多去看有用实用的书，做有价值的事情，珍惜自己有的机会。完成好课程，做好实习的任务，要有一个研究生的觉悟。</p>
<p>另外，追逐幸福的要素：<br>1.找到喜欢的工作，高收入，受到社会的尊重<br>2.减少上下班耗费的时间，有充足的社交时间<br>3.对国家和社会有政治热情，参与度。</p>
<h3 id="笔记本里的诗"><a href="#笔记本里的诗" class="headerlink" title="笔记本里的诗"></a>笔记本里的诗</h3><p>不论曾经的彼此多么幼稚，多么可笑<br>终有一天我们都变得成熟；<br>也终有一天，我们都会老去；<br>可是，却没有人可以永远不长大，<br>却没有人可以永远年轻，<br>成熟，有时候会让人心痛、很无奈。<br>那个时候才会懂得–<br>爱情本不是件该执着的事情。</p>
<p><img src="http://7xl4js.com1.z0.glb.clouddn.com/poem5291.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="特奥会冠军讲解智障人士生活"><a href="#特奥会冠军讲解智障人士生活" class="headerlink" title="特奥会冠军讲解智障人士生活"></a>特奥会冠军讲解智障人士生活</h3><p>首先看完一个感动的TED TALK，关于社会对智障人士的看法，一位特奥会的冠军以身作则提及他们的生活，受歧视，然特奥会提供了一个平台，展示属于他们生命的价值，他们的梦想和他们的尊严。相比于我们，诚然他们的舞台太小，但我们应该看到他们所作的努力。对于自己，四肢健全，家庭幸福安康，应该有更多的理由去追逐幸福，有时候不要一直想着缺少的，应该惦记自己所拥有的，记得感恩。并去勇敢自信的追逐自己所想所求，不要害怕失败，不要害怕别人的目光，勇敢的be yourself.虽然那可能不容易，但人生只有一次，时间是宝贵的]]>
    
    </summary>
    
      <category term="Ted" scheme="https://csrjtan.github.io/tags/Ted/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode15]]></title>
    <link href="https://csrjtan.github.io/2016/04/17/leetcode15/"/>
    <id>https://csrjtan.github.io/2016/04/17/leetcode15/</id>
    <published>2016-04-17T09:20:41.000Z</published>
    <updated>2016-06-01T14:50:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h3><p>问题：给出一个数组S，找出里面三个数组成a+b+c = 0,且a&lt;b&lt;c,并且是唯一triplets</p>
<p>思路：先排序，从两边逼近中间求解twoSum。最开始是从前往后匹配，发现超时了。现在复杂度在O(n^2)<br><a id="more"></a><br><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; threeSum(vector&lt;<span class="built_in">int</span>&gt;&amp; <span class="built_in">num</span>) &#123;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">std::sort(<span class="built_in">num</span>.begin(),<span class="built_in">num</span>.end());</span><br><span class="line">vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; result;</span><br><span class="line"><span class="built_in">int</span> len = <span class="built_in">num</span>.size();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> target = <span class="number">0</span>- <span class="built_in">num</span>[i];</span><br><span class="line">    <span class="built_in">int</span> start = i+<span class="number">1</span>, end = len - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//twoSum求解</span></span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">num</span>[start]+<span class="built_in">num</span>[end]==target)</span><br><span class="line">        &#123;	</span><br><span class="line">            vector&lt;<span class="built_in">int</span>&gt; solution;</span><br><span class="line">            solution.push_back(<span class="built_in">num</span>[i]);</span><br><span class="line">            solution.push_back(<span class="built_in">num</span>[start]);</span><br><span class="line">            solution.push_back(<span class="built_in">num</span>[end]);</span><br><span class="line">            result.push_back(solution);</span><br><span class="line">            start++,end--;</span><br><span class="line">            <span class="comment">//当前一位和后一位是一样的时候，直接跳过这一层的判断</span></span><br><span class="line">            <span class="keyword">while</span>(start&lt;end&amp;&amp;<span class="built_in">num</span>[start]==<span class="built_in">num</span>[start<span class="number">-1</span>]) start++;</span><br><span class="line">            <span class="keyword">while</span>(start&lt;end&amp;&amp;<span class="built_in">num</span>[end] ==<span class="built_in">num</span>[end+<span class="number">1</span>]) end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两边判断逼近</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">num</span>[start]+<span class="built_in">num</span>[end]&lt;target)</span><br><span class="line">            start++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//时刻判断第一位a是否重复</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">num</span>[i]==<span class="built_in">num</span>[i+<span class="number">1</span>])</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3ClosestSum"><a href="#3ClosestSum" class="headerlink" title="3ClosestSum"></a>3ClosestSum</h3><p>问题：求三个和的最相近近似解<br>思路：转化成求两个和离target的最相近似解</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// return the twoSumClosest sum</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">twoSumClosest</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;sortedNum,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="keyword">target</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = start , tail = sortedNum.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>,dis = INT_MAX;</span><br><span class="line">    <span class="comment">//依据最近距离返回res</span></span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = sortedNum[head]+ sortedNum[tail];</span><br><span class="line">        <span class="keyword">if</span>(tmp&lt;<span class="keyword">target</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">target</span>-tmp&lt;dis)</span><br><span class="line">            &#123;</span><br><span class="line">                res = tmp;</span><br><span class="line">                dis = <span class="keyword">target</span>-tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            head++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(tmp &gt; <span class="keyword">target</span>)</span></span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp-<span class="keyword">target</span>&lt;dis)</span><br><span class="line">            &#123;</span><br><span class="line">                res = tmp;</span><br><span class="line">                dis = tmp-<span class="keyword">target</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tail--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;num,<span class="keyword">int</span> <span class="keyword">target</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = num.size();</span><br><span class="line">    sort(num.begin(),num.end());</span><br><span class="line">    <span class="keyword">int</span> res,dis = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">int</span> target2 = <span class="keyword">target</span>-num[i],tmpdis;</span><br><span class="line">        <span class="keyword">int</span> tmpres = twoSumClosest(num,i+<span class="number">1</span>,target2);</span><br><span class="line">        <span class="comment">// 若有更近解，更新res</span></span><br><span class="line">        <span class="keyword">if</span>((tmpdis = abs(tmpres-target2))&lt;dis)</span><br><span class="line">        &#123;</span><br><span class="line">            res = tmpres + num[i];</span><br><span class="line">            dis = tmpdis;</span><br><span class="line">            <span class="comment">// 有一样解即刻返回</span></span><br><span class="line">            <span class="keyword">if</span>(res==<span class="keyword">target</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h3><p>问题： 4个和为target<br>思路：2+2的方法，遍历前两个，然后求解twoSum问题</p>
<pre><code>vector&lt;vector&lt;int&gt; &gt; fourSum(vector&lt;int&gt; &amp;num, int target) {
    int n = num.size();
    vector&lt;vector&lt;int&gt; &gt; res;
    sort(num.begin(), num.end());
    for(int i = 0; i &lt; n-3; i++)
    {
        if(i &gt; 0 &amp;&amp; num[i] == num[i-1])continue;//防止第一个元素重复
        for(int j = i+1; j &lt; n-2; j++)
        {
            if(j &gt; i+1 &amp;&amp; num[j] == num[j-1])continue;//防止第二个元素重复
            int target2 = target - num[i] - num[j];
            int head = j+1, tail = n-1;
            //Two Sum Problem
            while(head &lt; tail)
            {
                int tmp = num[head] + num[tail];
                if(tmp &gt; target2)
                    tail--;
                else if(tmp &lt; target2)
                    head++;
                else
                {
                    res.push_back(vector&lt;int&gt;{num[i], num[j], num[head], num[tail]});
                    //为了防止出现重复的二元组，使结果等于target2
                    int k = head+1;
                    while(k &lt; tail &amp;&amp; num[k] == num[head])k++;
                    head = k;

                    k = tail-1;
                    while(k &gt; head &amp;&amp; num[k] == num[tail])k--;
                    tail = k;
                }
            }
        }
    }
    return res;
}
</code></pre><p>```</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h3><p>问题：给出一个数组S，找出里面三个数组成a+b+c = 0,且a&lt;b&lt;c,并且是唯一triplets</p>
<p>思路：先排序，从两边逼近中间求解twoSum。最开始是从前往后匹配，发现超时了。现在复杂度在O(n^2)<br>]]>
    
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode7-14]]></title>
    <link href="https://csrjtan.github.io/2016/04/13/leetcode7-14/"/>
    <id>https://csrjtan.github.io/2016/04/13/leetcode7-14/</id>
    <published>2016-04-13T07:52:37.000Z</published>
    <updated>2016-06-01T14:51:09.000Z</updated>
    <content type="html"><![CDATA[<h4 id="leetcode7"><a href="#leetcode7" class="headerlink" title="leetcode7"></a>leetcode7</h4><p>问题：逆序输出INTEGER<br>思路：分为正负，然后用模和除来一位位逆序输出<br><a id="more"></a><br><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">int reverse(int <span class="keyword">x</span>) &#123;</span><br><span class="line">		<span class="comment">//使用long long以方便边界处理</span></span><br><span class="line">       long long i = <span class="keyword">x</span>%<span class="number">10</span><span class="comment">;</span></span><br><span class="line">       int <span class="keyword">j</span> = <span class="keyword">x</span><span class="comment">;</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">j</span>==<span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> i<span class="comment">;</span></span><br><span class="line">       <span class="keyword">while</span>((<span class="keyword">j</span>/=<span class="number">10</span>)!=<span class="number">0</span>)</span><br><span class="line">       &#123;	<span class="comment">//从低位往高位运算结果</span></span><br><span class="line">           i = i*<span class="number">10</span> + <span class="keyword">j</span>%<span class="number">10</span><span class="comment">;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//边界判断</span></span><br><span class="line">       <span class="keyword">if</span>(i&gt;<span class="number">2147483647</span> || i&lt;-<span class="number">2147483647</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">       <span class="keyword">return</span> i<span class="comment">;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode8"><a href="#leetcode8" class="headerlink" title="leetcode8"></a>leetcode8</h4><p>问题：String to Integer(ATOI)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> myAtoi(string <span class="keyword">str</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遇到空格跳过</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">str</span>[i]==<span class="string">' '</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="comment">//区分正负</span></span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>[i]==<span class="string">'+'</span>)</span><br><span class="line">        &#123;    flag = <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">str</span>[i]==<span class="string">'-'</span>)</span><br><span class="line">        &#123;    flag = <span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>[i]&gt;=<span class="string">'0'</span>&amp;&amp;<span class="keyword">str</span>[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">//用long long方便判断溢出</span></span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res =<span class="number">0</span>;</span><br><span class="line">            res += (<span class="keyword">str</span>[i]-<span class="string">'0'</span>);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//string转换成int</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">str</span>[i]&gt;=<span class="string">'0'</span> &amp;&amp; <span class="keyword">str</span>[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = res *<span class="number">10</span> +(<span class="keyword">str</span>[i]-<span class="string">'0'</span>);</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span>(res&gt;INT_MAX)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> flag==<span class="number">1</span>?INT_MAX:INT_MIN;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * flag;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="leetcode9"><a href="#leetcode9" class="headerlink" title="leetcode9"></a>leetcode9</h4><p>问题：判断integer是否回文<br><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">bool isPalindrome(<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="comment">//不考虑负数</span></span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">div</span> = <span class="number">1</span>; <span class="comment">//最大除项</span></span><br><span class="line">        <span class="keyword">while</span>((x/<span class="keyword">div</span>)&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">div</span>*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = x /<span class="keyword">div</span>;</span><br><span class="line">            <span class="keyword">int</span> r = x %<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l!=r)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//reduce left and right</span></span><br><span class="line">            <span class="comment">//如果一致，同时左右一起消去</span></span><br><span class="line">            x = x%<span class="keyword">div</span> / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">div</span>/=<span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode10"><a href="#leetcode10" class="headerlink" title="leetcode10"></a>leetcode10</h4><p>问题：正则匹配,.表示任意字母，*表示任意个数<br><a href="http://articles.leetcode.com/regular-expression-matching" target="_blank" rel="external">作者回答</a><br>这个问题是正则匹配的问题，比较复杂，是一个状态机匹配的问题，可以用递归去求解。<br><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"> bool isMatch(string <span class="keyword">s</span>, string p) &#123;</span><br><span class="line"> 	<span class="comment">//空串匹配</span></span><br><span class="line">   <span class="keyword">if</span> (p[<span class="number">0</span>] == '\<span class="number">0</span>')</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">s</span>[<span class="number">0</span>] == '\<span class="number">0</span>'<span class="comment">;</span></span><br><span class="line"><span class="comment">//遇到的是非'*'</span></span><br><span class="line"><span class="keyword">if</span> (p[<span class="number">1</span>] != '*')&#123;</span><br><span class="line">	<span class="comment">//字符匹配或者匹配'.'</span></span><br><span class="line">	<span class="keyword">return</span> ((p[<span class="number">0</span>] == <span class="keyword">s</span>[<span class="number">0</span>]) || (p[<span class="number">0</span>] == '.' &amp;&amp; <span class="keyword">s</span>[<span class="number">0</span>] != '\<span class="number">0</span>')) &amp;&amp; isMatch(<span class="keyword">s</span>.substr(<span class="number">1</span>, <span class="keyword">s</span>.length() - <span class="number">1</span>), p.substr(<span class="number">1</span>, p.length() - <span class="number">1</span>))<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遇到'*',使用while去递归尝试搜索每一种可能的情况</span></span><br><span class="line"><span class="keyword">while</span> ((p[<span class="number">0</span>] == <span class="keyword">s</span>[<span class="number">0</span>]) || (p[<span class="number">0</span>] == '.' &amp;&amp; <span class="keyword">s</span>[<span class="number">0</span>] != '\<span class="number">0</span>'))&#123;</span><br><span class="line">	<span class="keyword">if</span> (isMatch(<span class="keyword">s</span>, p.substr(<span class="number">2</span>,p.length()-<span class="number">2</span>)))</span><br><span class="line">		<span class="keyword">return</span> true<span class="comment">;</span></span><br><span class="line">	<span class="keyword">s</span>=<span class="keyword">s</span>.substr(<span class="number">1</span>,<span class="keyword">s</span>.length()-<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跨过'*'的字符</span></span><br><span class="line"><span class="keyword">return</span> isMatch(<span class="keyword">s</span>, p.substr(<span class="number">2</span>,p.length()-<span class="number">2</span>))<span class="comment">;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode11"><a href="#leetcode11" class="headerlink" title="leetcode11"></a>leetcode11</h4><p>问题：给一组正数数组，任意两个数组元素$a_i,a_j$,使得有最大面积$S=min(a_i,a_j)*(j-i)</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出最大的装水面积</span></span><br><span class="line">  <span class="keyword">int</span> maxArea(vector&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>) &#123;</span><br><span class="line">       <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> <span class="built_in">end</span> = <span class="built_in">height</span>.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">int</span> maxV = INT_MIN;</span><br><span class="line">       <span class="comment">//从两边向中间收拢</span></span><br><span class="line">       <span class="built_in">while</span>(start&lt;<span class="built_in">end</span>)&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> contains = <span class="built_in">min</span>(<span class="built_in">height</span>[<span class="built_in">end</span>],<span class="built_in">height</span>[start]) * (<span class="built_in">end</span>-start);</span><br><span class="line">           maxV = <span class="built_in">max</span>(maxV,contains);</span><br><span class="line">           <span class="comment">//左比右的板短，移动左边</span></span><br><span class="line">           <span class="built_in">if</span>(<span class="built_in">height</span>[start]&lt;<span class="built_in">height</span>[<span class="built_in">end</span>])</span><br><span class="line">               start++;</span><br><span class="line">           <span class="built_in">else</span></span><br><span class="line">               <span class="built_in">end</span>--;</span><br><span class="line">               </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> maxV;</span><br></pre></td></tr></table></figure>
<h4 id="leetcode12"><a href="#leetcode12" class="headerlink" title="leetcode12"></a>leetcode12</h4><p>问题：INTEGER TO ROMAN<br>思路：关键在于罗马数制和阿拉伯数制的映射，分为M,D,C,L,V,I。<br>由罗马字母的数值大小取模匹配。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">intToRoman</span>(<span class="params"><span class="keyword">int</span> num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span> &amp;&amp; num &lt; <span class="number">4000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">string</span> res = <span class="string">""</span>;</span><br><span class="line">		<span class="comment">//建立映射</span></span><br><span class="line">		<span class="keyword">string</span> symbol[] = &#123; <span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span> &#125;;</span><br><span class="line">		<span class="keyword">int</span> <span class="keyword">value</span>[] = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">		<span class="keyword">while</span> (num&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">sizeof</span>(<span class="keyword">value</span>)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); i++)</span><br><span class="line">			&#123;	</span><br><span class="line">				<span class="comment">//将integer由罗马字母的大到小匹配，然后输出</span></span><br><span class="line">				<span class="keyword">if</span> (num / <span class="keyword">value</span>[i]&gt;<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (num / <span class="keyword">value</span>[i]); j++)</span><br><span class="line">						res += symbol[i];</span><br><span class="line">					num %= <span class="keyword">value</span>[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="leetcode13"><a href="#leetcode13" class="headerlink" title="leetcode13"></a>leetcode13</h4><p>问题：ROMAN TO INTEGER<br>最简思路：罗马字母里，左比右小，则为右减左；左比右大，则为右加左。<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历罗马字串，左和右是指罗马字值M,D,C,X,V,I</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">left</span>&lt;<span class="keyword">right</span>:</span><br><span class="line">	res+= res-<span class="number">2</span>*<span class="keyword">left</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	res+= res+<span class="keyword">right</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我的思路：先匹配两字的，再匹配一字的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span>(<span class="params"><span class="keyword">string</span> s</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">string</span> symbol[] = &#123; <span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>,<span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">value</span>[] = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>,<span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="function"><span class="keyword">string</span> <span class="title">match</span>(<span class="params">s,i,<span class="number">2</span></span>)</span>;</span><br><span class="line">		<span class="comment">//First find the two in advance</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">sizeof</span>(symbol) / <span class="keyword">sizeof</span>(symbol[<span class="number">0</span>])); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// match symbol</span></span><br><span class="line">			<span class="keyword">if</span> (<a href="http://match.compare" class="test test-url" target="_blank" rel="noopener noreferrer">match.compare</a>(symbol[j]) == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				res += <span class="keyword">value</span>[j];</span><br><span class="line">				i++;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">//find the one then</span></span><br><span class="line">		<span class="function"><span class="keyword">string</span> <span class="title">match1</span>(<span class="params">s, i, <span class="number">1</span></span>)</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">sizeof</span>(symbol) / <span class="keyword">sizeof</span>(symbol[<span class="number">0</span>])); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<a href="http://match1.compare" class="test test-url" target="_blank" rel="noopener noreferrer">match1.compare</a>(symbol[j]) == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				res += <span class="keyword">value</span>[j];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (res &gt; <span class="number">0</span> &amp;&amp; res &lt; <span class="number">4000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h4 id="leetcode14"><a href="#leetcode14" class="headerlink" title="leetcode14"></a>leetcode14</h4><p>问题：Longest Common Prefix，求字符串组里面，公共有的前缀子串。<br>思路：这个是公共子串的特例，前缀子串，公共子串的学问很深，可以参考<a href="http://www.cnblogs.com/ider/p/longest-common-substring-problem-optimization.html" target="_blank" rel="external">文章</a>，里面使用一个个起始字符暴力匹配O(N^3),和DP的O(N^2)等。<br>这个问题也十分有用，可以判断字符串的相似度等等，经典的面试题。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> longestCommonPrefix(<span class="keyword">vector</span>&lt;<span class="keyword">string</span>&gt;&amp; strs) &#123;</span><br><span class="line">	<span class="comment">//判断边界条件</span></span><br><span class="line">   	<span class="keyword">if</span> (strs.<span class="keyword">size</span>() == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (strs.<span class="keyword">size</span>() == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">string</span> com = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">string</span> res = <span class="string">""</span>;</span><br><span class="line">	<span class="comment">//先比较两串</span></span><br><span class="line">	<span class="keyword">int</span> len = strs[<span class="number">0</span>].length() &lt; strs[<span class="number">1</span>].length() ? strs[<span class="number">0</span>].length() : strs[<span class="number">1</span>].length();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (strs[<span class="number">0</span>][i] == strs[<span class="number">1</span>][i])</span><br><span class="line">			com += strs[<span class="number">0</span>][i];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		    <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (strs.<span class="keyword">size</span>() == <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> com;</span><br><span class="line">	<span class="comment">//用common串跟之后每一个串比较，common会越来越短</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; (strs.<span class="keyword">size</span>()); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		res = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">int</span> len = com.length()&lt;strs[i].length() ? com.length() : strs[i].length();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (com[j] == strs[i][j])</span><br><span class="line">				res += com[j];</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		com = res;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="leetcode7"><a href="#leetcode7" class="headerlink" title="leetcode7"></a>leetcode7</h4><p>问题：逆序输出INTEGER<br>思路：分为正负，然后用模和除来一位位逆序输出<br>]]>
    
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode3-6]]></title>
    <link href="https://csrjtan.github.io/2016/04/13/leetcode3-6/"/>
    <id>https://csrjtan.github.io/2016/04/13/leetcode3-6/</id>
    <published>2016-04-13T06:55:42.000Z</published>
    <updated>2016-06-01T14:51:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="LeetCode-3"><a href="#LeetCode-3" class="headerlink" title="LeetCode 3"></a>LeetCode 3</h4><p>Ques: Find the length of longest substring without repeating characters.</p>
<p>思路：用table记录出现char字符的次数，256个ASCII字符初始化为-1.如果遇到重复，则记录在table里面，<br><a id="more"></a><br>我的代码:<br><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> lengthOfLongestSubstring(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="built_in">tables</span>[<span class="number">256</span>];</span><br><span class="line">        fill(<span class="built_in">tables</span>,<span class="built_in">tables</span>+<span class="number">256</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>,lastRepeatedPos=<span class="number">-1</span>;</span><br><span class="line">        for(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当找到重复元素且lastRepeatedPos小于找到重复元素的下表时，更新lastRepeatedPos</span></span><br><span class="line">            if(<span class="built_in">tables</span>[s[i]]!=<span class="number">-1</span>&amp;&amp;lastRepeatedPos&lt;<span class="built_in">tables</span>[s[i]])</span><br><span class="line">                lastRepeatedPos=<span class="built_in">tables</span>[s[i]];</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//更新最大值</span></span><br><span class="line">            result=<span class="built_in">max</span>(result,i-lastRepeatedPos);</span><br><span class="line">            <span class="comment">//元素插入表中</span></span><br><span class="line">            <span class="built_in">tables</span>[s[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>官方解题：<br><a href="https://leetcode.com/articles/longest-substring-without-repeating-characters/" target="_blank" rel="external">LeetCode 3 Solution</a></p>
<h5 id="AP-1"><a href="#AP-1" class="headerlink" title="AP 1"></a>AP 1</h5><p>暴力破解，但超时了,TC = O(N^3),对于字符串中的每个子串都去扫，是否子串为独立的。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JAVA VERSION</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> lengthOfLongestSubstring(<span class="keyword">String</span> s) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = s.length();</span><br><span class="line">        <span class="built_in">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            	<span class="comment">//是否存在唯一的子串，记录最长值</span></span><br><span class="line">                <span class="keyword">if</span> (allUnique(s, i, j)) ans = Math.<span class="built_in">max</span>(ans, j - i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> allUnique(<span class="keyword">String</span> s, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">        Set&lt;Character&gt; <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//将串S从头到尾的放入set匹配一次是否重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">            Character ch = s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">set</span>.contains(ch)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="built_in">set</span>.<span class="built_in">add</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="AP-2"><a href="#AP-2" class="headerlink" title="AP 2"></a>AP 2</h5><p>基于上述，我们重复扫了很多子串，假设固定开始位置一个个扫的话，可以减少重复扫串的运算。这样可以使TC = O(N^2),LEFT-CLOSED AND RIGHT OPEN</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SLIDING WINDOW </span></span><br><span class="line"><span class="comment">// JAVA VERSION</span></span><br><span class="line">    public int lengthOfLongestSubstring(String <span class="keyword">s</span>) &#123;</span><br><span class="line">        int n = <span class="keyword">s</span>.length()<span class="comment">;</span></span><br><span class="line">        <span class="keyword">Set</span>&lt;Character&gt; <span class="keyword">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;()<span class="comment">;</span></span><br><span class="line">        int ans = <span class="number">0</span>, i = <span class="number">0</span>, <span class="keyword">j</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        <span class="comment">//固定i，先把j搜完，再加i</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="keyword">j</span> &lt; n) &#123;</span><br><span class="line">            <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">set</span>.contains(<span class="keyword">s</span>.charAt(<span class="keyword">j</span>)))&#123;</span><br><span class="line">                <span class="keyword">set</span>.add(<span class="keyword">s</span>.charAt(<span class="keyword">j</span>++))<span class="comment">;</span></span><br><span class="line">                ans = Math.max(ans, <span class="keyword">j</span> - i)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">set</span>.remove(<span class="keyword">s</span>.charAt(i++))<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans<span class="comment">;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="AP-3"><a href="#AP-3" class="headerlink" title="AP 3"></a>AP 3</h5><p>SLDING WINDOW OPTIMIZED, TC=N = O(N)，SC=m=O(1). m为charset大小<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> lengthOfLongestSubstring(<span class="keyword">String</span> s) &#123;</span><br><span class="line">       <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">       Map&lt;Character, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// current index of character</span></span><br><span class="line">       <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">       <span class="built_in">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">           <span class="built_in">if</span> (<span class="built_in">map</span>.containsKey(s.charAt(j))) &#123;</span><br><span class="line">               i = Math.<span class="built_in">max</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(s.charAt(j)), i);</span><br><span class="line">           &#125;</span><br><span class="line">           ans = Math.<span class="built_in">max</span>(ans, j - i + <span class="number">1</span>);</span><br><span class="line">           <span class="built_in">map</span>.<span class="built_in">put</span>(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="LEETCODE-4"><a href="#LEETCODE-4" class="headerlink" title="LEETCODE 4"></a>LEETCODE 4</h4><p>QUES: 找两个有序数组中的中位数<br>解法：1.暴力地将两个数组合并然后排序，直接得到中位数<br>     2.求得数组大小，用堆排的合并方法，找到中位数。 复杂度O(log(m+n))</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// My Code</span></span><br><span class="line"><span class="comment">//合并两个数组排序，再根据大小分为奇偶情况输出中位数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l1 = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> l2 = nums2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1;i++)</span><br><span class="line">            res.push_back(nums1[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2;i++)</span><br><span class="line">            res.push_back(nums2[i]);</span><br><span class="line">        sort(res.begin(),res.end());</span><br><span class="line">        <span class="keyword">if</span>(res.size()%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)(res[(l1+l2<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>]+res[(l1+l2 &gt;&gt;<span class="number">1</span>)])/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)(res[(l1+l2)&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="LEETCODE-5"><a href="#LEETCODE-5" class="headerlink" title="LEETCODE 5"></a>LEETCODE 5</h4><p>问题： 给一个串S,找出其中最长的回文子串</p>
<p>官方使用DP的方法以及EXPAND AROUNG CENTER，其中我的代码就是EXPAND AROUND CENTER。还有一个Manacher’s Algorithm,它通过在字母间加#和以$作为起始符，使得串不再分为奇偶的情况，有效地统一起来，核心思想还是基于中央字母的展开策略。<br><a href="https://leetcode.com/articles/longest-palindromic-substring/" target="_blank" rel="external">官方解法</a></p>
<p>我的解法：分为奇偶情况判断，遍历串，寻找以该字符为中心，两边的回文串最大长度，把最长的情况的信息保留，然后返回。TC=O(N^2)</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string </span>longestPalindrome(<span class="keyword">string </span>s) &#123;</span><br><span class="line">        int len = s.length()<span class="comment">;</span></span><br><span class="line">        int i,j<span class="comment">;</span></span><br><span class="line">        int <span class="keyword">subTempLength=0;</span><br><span class="line"></span>        int <span class="keyword">subMax=0,subMaxIndex=0;</span><br><span class="line"></span>        for(i<span class="number">=0</span> <span class="comment">; i&lt; len;i++)</span></span><br><span class="line">        &#123;</span><br><span class="line">            //Odd</span><br><span class="line">            for(j<span class="number">=0</span><span class="comment">;(i-j)&gt;=0&amp;&amp;(i+j)&lt;len;j++)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">if</span>(s[i-j]!<span class="symbol">=s</span>[i+j])</span><br><span class="line">                    <span class="keyword">break;</span><br><span class="line"></span>                <span class="keyword">subTempLength </span>= j*<span class="number">2</span>+<span class="number">1</span><span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">if</span>(<span class="keyword">subTempLength </span>&gt; <span class="keyword">subMax)</span><br><span class="line"></span>            &#123;</span><br><span class="line">                <span class="keyword">subMax </span>= <span class="keyword">subTempLength;</span><br><span class="line"></span>                <span class="keyword">subMaxIndex </span>= i<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            //Even</span><br><span class="line">            for(j<span class="number">=0</span><span class="comment">;(i-j)&gt;=0&amp;&amp;(i+j+1)&lt;len;j++)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">if</span>(s[i-j]!<span class="symbol">=s</span>[i+j+<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break;</span><br><span class="line"></span>                <span class="keyword">subTempLength </span>= j*<span class="number">2</span> +<span class="number">2</span><span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">if</span>(<span class="keyword">subTempLength </span>&gt; <span class="keyword">subMax)</span><br><span class="line"></span>            &#123;</span><br><span class="line">                <span class="keyword">subMax </span>= <span class="keyword">subTempLength;</span><br><span class="line"></span>                <span class="keyword">subMaxIndex </span>= i<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        int startIndex <span class="comment">;</span></span><br><span class="line">        <span class="meta">if</span>(<span class="keyword">subMax </span>% <span class="number">2</span> =<span class="number">=0</span>)</span><br><span class="line">            startIndex= <span class="keyword">subMaxIndex </span>- <span class="keyword">subMax/2 </span>+<span class="number">1</span><span class="comment">;</span></span><br><span class="line">        <span class="meta">else</span></span><br><span class="line">            startIndex = <span class="keyword">subMaxIndex </span>- <span class="keyword">subMax/2;</span><br><span class="line"></span>        <span class="keyword">string </span>result(s,startIndex,<span class="keyword">subMax);</span><br><span class="line"></span>        return result<span class="comment">;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="LEETCODE-6"><a href="#LEETCODE-6" class="headerlink" title="LEETCODE 6"></a>LEETCODE 6</h4><p>问题：ZigZag Conversion<br>一开始没看懂，将串转化成蛇形，然后输出，有点点加密的味道<br>思路：关键理解到蛇形转化的过渡的字母是怎么在数组表示即可<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//My Code</span></span><br><span class="line"><span class="keyword">string</span> convert(<span class="keyword">string</span> s, <span class="keyword">int</span> nRows) &#123;</span><br><span class="line">        <span class="built_in">if</span>(s.length()==<span class="number">0</span>||nRows &lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">if</span>(nRows ==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">return</span> s;</span><br><span class="line">        <span class="keyword">string</span> res;</span><br><span class="line">        <span class="comment">//蛇形过渡的位置和行的关系</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">2</span> * nRows - <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//逐行输出蛇形字符</span></span><br><span class="line">        <span class="built_in">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nRows;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">//根据原长转换</span></span><br><span class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j+=<span class="built_in">size</span>)</span><br><span class="line">            &#123;	<span class="comment">//输出竖直的字符</span></span><br><span class="line">                res+=s[j];</span><br><span class="line">                <span class="comment">//输出斜形的字符</span></span><br><span class="line">                <span class="built_in">if</span>(i!=<span class="number">0</span>&amp;&amp;i!=nRows<span class="number">-1</span>&amp;&amp; j+<span class="built_in">size</span><span class="number">-2</span>*i&lt;s.length())</span><br><span class="line">                    res+=s[j+<span class="built_in">size</span><span class="number">-2</span>*i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="LeetCode-3"><a href="#LeetCode-3" class="headerlink" title="LeetCode 3"></a>LeetCode 3</h4><p>Ques: Find the length of longest substring without repeating characters.</p>
<p>思路：用table记录出现char字符的次数，256个ASCII字符初始化为-1.如果遇到重复，则记录在table里面，<br>]]>
    
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode2&3]]></title>
    <link href="https://csrjtan.github.io/2016/03/07/leetcode2/"/>
    <id>https://csrjtan.github.io/2016/03/07/leetcode2/</id>
    <published>2016-03-07T05:59:56.000Z</published>
    <updated>2016-06-01T14:50:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="leetcode2-Add-Two-Numbers"><a href="#leetcode2-Add-Two-Numbers" class="headerlink" title="leetcode2:Add Two Numbers"></a>leetcode2:Add Two Numbers</h3><p>I:(2-&gt;4-&gt;3)+(5-&gt;6-&gt;4)<br>O:(7-&gt;0-&gt;8)<br>原则：有进位往后增加，无则扩展<br><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> *next;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(<span class="type">NULL</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */&lt;!--more--&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">ListNode</span>* addTwoNumbers(<span class="type">ListNode</span>* l1, <span class="type">ListNode</span>* l2) &#123;</span><br><span class="line">        <span class="type">ListNode</span> dummy(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span>* p = &amp;dummy;</span><br><span class="line">        <span class="built_in">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1||l2)&#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">val</span> = cn+(l1?l1-&gt;<span class="keyword">val</span>:<span class="number">0</span>)+(l2?l2-&gt;<span class="keyword">val</span>:<span class="number">0</span>);</span><br><span class="line">            cn = <span class="keyword">val</span>/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">val</span> = <span class="keyword">val</span>%<span class="number">10</span>;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="keyword">val</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l1)</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2)</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cn!=<span class="number">0</span>)&#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="type">ListNode</span>(cn);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="leetcode3-Longest-Substring-Without-Repeating-Characters"><a href="#leetcode3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="leetcode3:Longest Substring Without Repeating Characters"></a>leetcode3:Longest Substring Without Repeating Characters</h3><p>问题：寻找最大不重复字母的子串长度<br>解法：1.从每个元素找起始无重复字符串，时间复杂度为O(n^3)<br>      2.将没出现的字母放入set，当重复字母出现时，把已有之前的set的字母移除，并记录最长的子串长度<br>      3.用数组不用Map,直接定义一个变量来保存无重复字符串的第一个字符的下标，碰到重复的就更新下标</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> lengthOfLongestSubstring(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="built_in">tables</span>[<span class="number">256</span>];</span><br><span class="line">        fill(<span class="built_in">tables</span>,<span class="built_in">tables</span>+<span class="number">256</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>,lastRepeatedPos=<span class="number">-1</span>;</span><br><span class="line">        for(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当找到重复元素且lastRepeatedPos小于找到重复元素的下表时，更新lastRepeatedPos</span></span><br><span class="line">            if(<span class="built_in">tables</span>[s[i]]!=<span class="number">-1</span>&amp;&amp;lastRepeatedPos&lt;<span class="built_in">tables</span>[s[i]])</span><br><span class="line">                lastRepeatedPos=<span class="built_in">tables</span>[s[i]];</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//更新最大值</span></span><br><span class="line">            result=<span class="built_in">max</span>(result,i-lastRepeatedPos);</span><br><span class="line">            <span class="comment">//元素插入表中</span></span><br><span class="line">            <span class="built_in">tables</span>[s[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>总结：对于一个字符串，如果未出现重复，则该值放入数组中，由于ASCII最多有256种符号，则放入一个大小为256的数组里；如果出现重复的字母，即不为默认的-1，且第一个字符下标比这个重复字母下标小，则更新下标以及最长长度，并将该长度放入对应符号的数组值里。</p>
<h4 id="std-fill用法"><a href="#std-fill用法" class="headerlink" title="std::fill用法"></a>std::fill用法</h4><p>void fill(first,last,val);<br>fill(array,array+n,element);</p>
<p>memset(array,array+n,element);</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="leetcode2-Add-Two-Numbers"><a href="#leetcode2-Add-Two-Numbers" class="headerlink" title="leetcode2:Add Two Numbers"></a>leetcode2:A]]>
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[paper-reading-20160306]]></title>
    <link href="https://csrjtan.github.io/2016/03/06/paper-reading-20160306/"/>
    <id>https://csrjtan.github.io/2016/03/06/paper-reading-20160306/</id>
    <published>2016-03-06T05:34:57.000Z</published>
    <updated>2016-06-01T14:51:43.000Z</updated>
    <content type="html"><![CDATA[<p>之前阅读了左老师的两个paper,一直没有给总结，今天来赶紧写一下</p>
<h3 id="《On-kernel-difference-weighted-k-nearest-neighbor-classification》"><a href="#《On-kernel-difference-weighted-k-nearest-neighbor-classification》" class="headerlink" title="《On kernel difference-weighted k-nearest neighbor classification》"></a>《On kernel difference-weighted k-nearest neighbor classification》</h3><p>KNN的改进方法，利用临近点的差距作为权值的学习策略。将权值的学习转化成约束优化的问题，从优化数学的角度论证了易求解和适应高斯噪声以及扩展为kernel version，实验部分k,n以及theta是prefix然后相互学习下降求解的。<br>Contribution:<br>1.提出difference-weighted,转化成约束优化Model<br>2.证明了理论性以及适应于非线性数据集，kernel<br>3.得到实验结果比一些state-of-art的NN要好<br><a id="more"></a></p>
<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>NN是一个简单有效的模式识别聚类方法,这个论文提出了Kernel difference-weighted的KDF-KNN方法，用difference-weighted作为计算聚类距离时的权值，将一般的权值求解编程带约束的优化问题，并基于此理论Kernel化，最后验证数学理论和算法复杂度</p>
<h4 id="问题建模"><a href="#问题建模" class="headerlink" title="问题建模"></a>问题建模</h4><p>将最近邻的权值设置为 $W = argmin\frac{1}{2}||x-w^TX||^2 $ , $s.t. \sum_i^w w_i =1 $ , x为样本与相邻的欧几距离，w为当前权值。w是最终关于该数据集模型的最优权值，所以接下来的DW-KNN就是求解上述方程的约束最优化问题了</p>
<p>接下来使用凸优化和朗格朗日的方法求解,接下来做了关于高斯噪声的优化以及Kernel提升以适应非线性数据集，还理论分析对比了该方法与其他方法的复杂度</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>该方法计算使用x与邻近的不同作为权值来计算，而非简单的距离。将该问题有效转化成约束优化问题，从理论上证明该方法的理论有效性并从实验验证了该算法的有效性。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/KDW-KNN.png" alt="Difference-Weighted"> </p>
<h3 id="《On-accurate-orientation-extraction-and-appropriate-distance-measure-for-low-resolution-palmprint-recognition》"><a href="#《On-accurate-orientation-extraction-and-appropriate-distance-measure-for-low-resolution-palmprint-recognition》" class="headerlink" title="《On accurate orientation extraction and appropriate distance measure for low-resolution palmprint recognition》"></a>《On accurate orientation extraction and appropriate distance measure for low-resolution palmprint recognition》</h3><p>左老师在理大生物识别实验室的掌纹识别工作</p>
<p>1.掌纹识别的背景<br>2.两个问题：低分辨下，feature和distance measure<br>3.提出orientation feature<br>4.提出General angular distance的框架</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前阅读了左老师的两个paper,一直没有给总结，今天来赶紧写一下</p>
<h3 id="《On-kernel-difference-weighted-k-nearest-neighbor-classification》"><a href="#《On-kernel-difference-weighted-k-nearest-neighbor-classification》" class="headerlink" title="《On kernel difference-weighted k-nearest neighbor classification》"></a>《On kernel difference-weighted k-nearest neighbor classification》</h3><p>KNN的改进方法，利用临近点的差距作为权值的学习策略。将权值的学习转化成约束优化的问题，从优化数学的角度论证了易求解和适应高斯噪声以及扩展为kernel version，实验部分k,n以及theta是prefix然后相互学习下降求解的。<br>Contribution:<br>1.提出difference-weighted,转化成约束优化Model<br>2.证明了理论性以及适应于非线性数据集，kernel<br>3.得到实验结果比一些state-of-art的NN要好<br>]]>
    
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[16年二月之旅]]></title>
    <link href="https://csrjtan.github.io/2016/03/01/16%E5%B9%B4%E4%BA%8C%E6%9C%88%E4%B9%8B%E6%97%85/"/>
    <id>https://csrjtan.github.io/2016/03/01/16年二月之旅/</id>
    <published>2016-03-01T05:59:55.000Z</published>
    <updated>2016-06-01T14:50:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="广州海心沙家庭乐"><a href="#广州海心沙家庭乐" class="headerlink" title="广州海心沙家庭乐"></a>广州海心沙家庭乐</h3><p>幸福美满的家庭一直是我所拥有，只是可能与家人缺乏情感上的交流，我们需要多点磨合，进行积极有意义的沟通。这次海心沙的旅程让爸爸妈妈很是高兴，勇于表达自己的情感吧！<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023001.jpg?imageView2/2/w/300/q/90" alt="爸妈合照"></p>
<p>爸：1961.7.8，牛，55岁，会计。爱好军事，经济，唱歌。性格硬朗好面子，喜欢他人夸赞，爱戴我们，烟酒。大男子的东西。优点：沉稳，处事有方，得体，疼爱儿子<br>妈：1961.11.12，牛，55岁，仓库管理，准备退休，爱好运动，看书。居家女人，有点小生活。优点：勤劳善良和气，爱我们<br>哥：1987.8.9，兔，28岁，前端攻城狮，爱好酷帅，音乐，潮流时尚。优点：能力突出，迁就随和<br>我：1992.8.13，猴，24岁，研究僧，优点：聪明，会思考，勇敢乐观<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023002.jpg?imageView2/2/w/300/q/90" alt="家庭合照"></p>
<a id="more"></a>
<h3 id="广州花市"><a href="#广州花市" class="headerlink" title="广州花市"></a>广州花市</h3><p>今年过年上去找了小明玩，到他家玩了两局实况，还和他的家人一块吃了个饭，然后就出去领略过年广州的气息和花市的浓厚氛围。傍晚还吃了个萨莉亚，然后返程归家去。小明还是个会玩和值得信赖的哥们儿呀！<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023003.jpg?imageView2/2/w/300/q/90" alt="北京路花市"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023003.jpg?imageView2/2/w/300/q/90" alt="小明合照"></p>
<h3 id="带宝宝去花灯汇"><a href="#带宝宝去花灯汇" class="headerlink" title="带宝宝去花灯汇"></a>带宝宝去花灯汇</h3><p>去了佛山的岭南新天地看，大概是白天吧，没有灯饰不够动人，但有蜡笔小新，看到珊爷还是很喜欢的！勒流上佛山还真是方便，还有快线，果然是勒流白富美。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023007.jpg?imageView2/2/w/300/q/90" alt="岭南新天地"></p>
<p>然后回到香港去了看百万LED的花灯展，以及去了科大游玩，领略了无敌海景和科大的学术氛围。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023008.jpg?imageView2/2/w/300/q/90" alt="灯展"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023009.jpg?imageView2/2/w/300/q/90" alt="科大"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="广州海心沙家庭乐"><a href="#广州海心沙家庭乐" class="headerlink" title="广州海心沙家庭乐"></a>广州海心沙家庭乐</h3><p>幸福美满的家庭一直是我所拥有，只是可能与家人缺乏情感上的交流，我们需要多点磨合，进行积极有意义的沟通。这次海心沙的旅程让爸爸妈妈很是高兴，勇于表达自己的情感吧！<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023001.jpg?imageView2/2/w/300/q/90" alt="爸妈合照"></p>
<p>爸：1961.7.8，牛，55岁，会计。爱好军事，经济，唱歌。性格硬朗好面子，喜欢他人夸赞，爱戴我们，烟酒。大男子的东西。优点：沉稳，处事有方，得体，疼爱儿子<br>妈：1961.11.12，牛，55岁，仓库管理，准备退休，爱好运动，看书。居家女人，有点小生活。优点：勤劳善良和气，爱我们<br>哥：1987.8.9，兔，28岁，前端攻城狮，爱好酷帅，音乐，潮流时尚。优点：能力突出，迁就随和<br>我：1992.8.13，猴，24岁，研究僧，优点：聪明，会思考，勇敢乐观<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/Life023002.jpg?imageView2/2/w/300/q/90" alt="家庭合照"></p>]]>
    
    </summary>
    
      <category term="回忆" scheme="https://csrjtan.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[台湾之旅]]></title>
    <link href="https://csrjtan.github.io/2016/02/29/%E5%8F%B0%E6%B9%BE%E4%B9%8B%E6%97%85/"/>
    <id>https://csrjtan.github.io/2016/02/29/台湾之旅/</id>
    <published>2016-02-29T07:26:05.000Z</published>
    <updated>2016-06-01T14:49:23.000Z</updated>
    <content type="html"><![CDATA[<p>现在才来整理一下上年跨年之旅，台湾Trip。生活的东西确实需要不断的及时整理，及时思考。我们是从2016-01-29的时候出发的，01-07回港，持续了10天左右，这趟旅程收获了很多台湾美食，风景以及同行真挚的小伙伴。</p>
<h2 id="台北"><a href="#台北" class="headerlink" title="台北"></a>台北</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>因为大家都是临近第一个学期的期末，所以对于攻略方便的功课确实做得不够好。旅程一共四个小伙伴，我和宝宝还有静静和WINDY。大家各自带好的行李，出发在香港国际机场集合去，我们太蠢直接从地铁过去，每个人要98HKD的样子机场跨线，殊不知做巴士好像也才30HKD，时间是差不多的！上机前还担心肚子饿，吃了个M记，不过觉得香港的M记还真不错。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052901.jpg?imageView2/2/w/400/q/90" alt="机票"><br>四位同伴就此结识并开始上路了！第一次来到了香港国际机场，整个航班的设施和服务都是很到位的，顺带带宝宝第一次坐了灰机。（有如过山车般的好玩吧）<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052902.jpg?imageView2/2/w/400/q/90" alt="香港航空合照"><br>落地后，我们果断打车前往珊珊大人选的西门町住处，离捷运和地铁、景点商圈都很近，十分的赞！遗憾的是，我们还没买跨年去台南的票，而且我们因为价格太贵，没有订住处。所以悲催的在那边弄这个本应该攻略弄好的事，也只能怪台北跨年人太多了，各种挤，中途还找科长借了他女朋友家的车钥匙放行李，在上面躺了半个晚上，真是够凄惨的。（这是后话）台湾的民宿确实便宜呢，消费也不高，适合去旅行。放下行李我们出去西门町的小夜市吃小吃，这是当晚饭了，台湾基本晚饭就是小吃吃的，不然不够肚子用！吃了个火烤牛肉，还有鸡肉肠（她们都说好吃，我是没怎么吃到)。吃完逛了一会，回到去还要帮珊爷写Dissertation Proposal,我的天哪，我旅游的时间都用来做了什么。睡觉？买车票？写Proposal?.<br><a id="more"></a></p>
<h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>果断爬起来很晚，庆幸小伙伴们好像习惯我们拖拉的节奏，早上吃了个台湾牛肉面，中午就去台北故宫了，看了不少的珍宝。总结一下博物馆的珍宝一般就是华夏文化的历史文物，不外乎就是各种器具保留得比较好，铁器、青铜、玉、书画、陶瓷等等了，听说里面有国家一级文物瑰宝，可以感受到古代人的生活方式，以及礼制、文明等等。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052903.jpg?imageView2/2/w/400/q/90" alt="台北故宫"><br>之后没有去迷你博物馆，去了猫空，但因为我们动作慢而且阴天，坐水晶缆车好像也没有想象中的带感，也告诫了我们下次一定要计划好才出发。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052904.jpg?imageView2/2/w/400/q/90" alt="猫空水晶缆车"><br>这天晚上好像也在写Proposal,反正在旅行中写了两个！一个是关于Turing Test的Decaptcha，另一个有点忘了，关于UI设计之类的。</p>
<h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>依然爬起来很晚，坑踩多了就知道，去旅行一定不要睡太多，花钱花时间去旅游，交通费是大头，其他该花应该花，把旅程玩开心了，东西看够了，地方文化了解了，美食吃到了，这样才算真正的旅程。要么就不要去，去了不愿意花钱了解，花钱尝试美食，花时间和精力去走，还是休息睡觉的话，不如去度假比较好。</p>
<p>起来后马上去台北车站弄车票，最终买了商务高铁，RMB500左右，这个怪我，不应该去之前赌气说宝宝你来PLAN，这个计划我有份参与，我们就是一个TEAM，我的态度从一开始就不对，想看宝宝出洋相害的是大家和自己，吃力不讨好，没必要在这种事情上计较，珊爷的性格就是这样好胜逞强，平时多让着她点就好了。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052905.jpg?imageView2/2/w/400/q/90" alt="台北车站"><br>等弄好了这些好像已经有点晚了，赶去中正纪念堂看4点的站岗交接仪式，看了台北仪仗队的交接，真心帅气，那个踏步也是很刚劲有力而又优美的。中正就是蒋介石，对于台湾来说，孙中山和蒋介石都是一样的地位，一个为国父，一个为最高领导人，乃至宋美龄都是受到崇高尊敬的。关于台湾的政治可谓一匹布都说不完，蓝绿阵营抗争多年，政治内耗也是导致台湾经济萎靡不振的重要原因，庆幸台湾的旅游业发展迅猛，高新产业和娱乐业一直是强项。只是今年国内市场巨大，发展迅猛，不免使得台湾不少优质企业资源和人才外流。对于台湾而言，年轻人的就业压力还是比较大的，年轻人都往北部赶谋求好的发展，相对人情味没那么浓厚。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052907.jpg?imageView2/2/w/400/q/90" alt="居酒屋"><br>晚上去了WINDY找的一家居酒屋吃饭，感觉真的很好吃。完全停不下来，各种什么烧，照日烧，秋刀鱼也很不错，清酒怡情。然后就是台北的跨年演唱会和101烟火，千辛万苦为的就是这两个！比较遗憾的是没有登上101大楼，应该纠正去旅行觉得门票贵，请导游贵等不值得花的观念，该花的钱不应该省，让生活细节到位才最重要！跨年晚会看到了一系列的台湾明星，潘帅的劲歌热舞、毕书剑这位艺人让我眼前一亮、萧亚轩还有阿妹的压轴嗨歌热舞，到了阿妹，整场都要嗨翻了。人群到了1点多还是围着阿妹在跳动，我也是第一次感受到这种现场感染力的气氛，瞬间整个人都释放了。演唱会结束了，我们就着地铁来到晚上安顿的位置，在面包车上度过了艰辛的两小时，赶往捷运站乘坐6点的商务高铁。（对了，我们中途还遇到退宿后行李没办法处理的问题，所以是拿到科长的车上了，有点小尴尬。想着把行李寄放在台北车站，还被大叔各种鄙视，可算是这次台湾之旅唯一一次遇到不友好的人了，其他的对待游客和世界各地的人都如同朋友和亲人一般）<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052908.jpg?imageView2/2/w/400/q/90" alt="2016台北跨年演唱会"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052909.jpg?imageView2/2/w/400/q/90" alt="101大楼"></p>
<h2 id="高雄"><a href="#高雄" class="headerlink" title="高雄"></a>高雄</h2><h3 id="第四天-amp-第五天"><a href="#第四天-amp-第五天" class="headerlink" title="第四天&amp;第五天"></a>第四天&amp;第五天</h3><p>到达高雄已经快到10点了，吃个东西蹭一会就可以check in了，我们住在一个民宿里，屋主很NICE，还送了汉堡王之类的早餐劵，不得不说珊珊挑选的民宿都很不错，那个早餐也是很棒的，我们首先去看了美丽岛的中转站美景，然后去了打狗领事馆，高雄原来是一个抵御倭寇的军事港口，有一个地儿原住民成为Dakok，所以大家顺带也成为打狗了。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052910.jpg?imageView2/2/w/400/q/90" alt="高雄车站一景"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052911.jpg?imageView2/2/w/400/q/90" alt="静静抠脚大汉"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052913.jpg?imageView2/2/w/400/q/90" alt="平安符">在这里大家对着人像拍着玩，也上山去走了，山上有一家小寺庙，可以求个平安符之类的，我们来了一个挂着，预示今年的新年愿望，上年是顺顺利利，今年多一个长长久久。记得上一年跨年的时候，我们还是在大学城里面跟着一大群大学生在园内瞎逛，就在新天地吃了一个手抓饼就过完我们的2015年了，也忘了总结这一年是否做到了自己所达的目标，但得到林老师的推荐确实是人生中最重要的事之一，我必须珍惜。在CV的路上，写作的路上，编程的路上，技术的路上，找到自我！<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052912.jpg?imageView2/2/w/400/q/90" alt="打狗合照"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052914.jpg?imageView2/2/w/400/q/90" alt="山上合照"><br>之后我们来到国立中山大学，毕竟我们也是中大学子，跨越海峡来看望中山爷爷也是必须要做的事)，这是一个傍海而建的大学，有种HKUST的感觉，只是色调和感觉还是我们中大特色的！真希望时间充裕些，我们可以在捕捉一位学子，向他问问在校的情况，奈何好像在放假时候，没见到什么学生，游客倒是不少。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052915.jpg?imageView2/2/w/400/q/90" alt="国立中山大学"><br>这三天在高雄其实玩得不多，而且天气不大好，好像在台湾都是阴雨，对拍照和观景出行都十分不利，这一块我们是租单车骑行完成的，还搭渡去到祺津半岛玩了一转，看了灯塔古城墙和吃了海鲜。</p>
<h3 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h3><p>本来打算是去一个艺术区的，然后出发去垦丁的，但一直阴雨不止，windy提议我们出发去美术馆看展览，那我们不能放弃队友呢，大家的心情估计也跟着天气不上不下了吧。不过在艺术区倒是参观牛仔裤创业店了解到牛仔裤的工艺和设计，但我不喜欢穿牛仔裤，还吃到了很美味的凤梨酥，因为台湾气候原因，产的凤梨特别好吃，加上特别制作才出产正宗的凤梨酥。然后我们就打车去高雄美术馆，虽然天公不作美，但台湾人民确实和蔼可亲，出租车司机估计见到我们如此落魄，带我们去把高雄好吃的老店都转了一遍，让我们可以打包吃到，包括阿鲁哈、粽子、奶茶什么的，简直都是赞了，而我还记得中午吃的那个店的饺子还是什么面食超棒的，台南的东西好吃又便宜，消费水平真的是成本价。</p>
<h2 id="垦丁"><a href="#垦丁" class="headerlink" title="垦丁"></a>垦丁</h2><h3 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h3><p>买好票了，但发现从高雄去垦丁四个人明显坐的士要便宜快捷又舒服，所以果断去退票并坐上了陈师傅的车，没想到就这样又遇上好人了，基本上台湾的出租车司机都不坏。进驻了在南湾附近的蝴蝶旅馆，我们就即将开展在台湾最美好的旅程了，垦丁真是一个美得不行的地方，迄今为止依然怀念着，而且当时是旅游淡季，气候适宜，价格也相对实惠，玩起来赏心悦目的。当我们赶到旅馆然后安顿好，果断去借了摩托车<br>出发去看关山夕照，带着珊宝爬坡电动车的马力确实不行呀，赶到的时候太阳公公还留有一眼，冲上去看到的美景让人觉得都是值得的。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052916.jpg?imageView2/2/w/400/q/90" alt="关山夕照"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052917.jpg?imageView2/2/w/400/q/90" alt="海天一色"></p>
<h3 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h3><p>看完夕照我们晚上到恒春逛了一下就回去，为了赶着要看日出，大家早起，一早要赶去龙磐公园。一大早几乎大伙都爬不起来，带齐装备，充好坐骑。一路迎着大海星辰飞驰，奈何路途遥远，晚起加之云层太厚，看到的日出并不太完美。然后去到了台湾最南点，想起一首歌《国境之南》。飞车冲到最南点，感受原始的生态，看到好多蝴蝶和小松鼠，好可爱。然后去了一个国家公园里面拍了一下大灯塔，有点像Kodak库里面的一个灯塔。然后回到旅馆休息，下午再出去玩浮潜。第一次玩浮潜，然后海里的微生物超多，富有养分。Windy同学一直呛水，被教练大家调戏得不要不要的，玩个浮潜把晚饭也吃了。然后去了吃鱼生，感觉也还是一般，可能我不是吃海鲜的料子，从小没有培养出那个味觉。晚上还去看了一下星空，天气太好了，好久没见到过那么多的星星。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052918.jpg?imageView2/2/w/400/q/90" alt="台湾最南点"></p>
<h3 id="第九天"><a href="#第九天" class="headerlink" title="第九天"></a>第九天</h3><p><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052919.jpg?imageView2/2/w/400/q/90" alt="南湾海边"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052920.jpg?imageView2/2/w/400/q/90" alt="水上活动合照"><br>这天起来去玩了一系列的水上活动，包括摩托艇、甜甜圈之类的，很刺激很有趣。然后驱车前往国家海洋馆，看了好多珊瑚，水上动物，了解了很多关于海洋生态、海洋保护的知识。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052921.jpg?imageView2/2/w/400/q/90" alt="国立海洋生物博物馆"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052922.jpg?imageView2/2/w/400/q/90" alt="白鲸"></p>
<h3 id="第十天"><a href="#第十天" class="headerlink" title="第十天"></a>第十天</h3><p>由于计划有误，我们的飞机应该从高雄往香港飞，结果买机票太笨，从台北往香港飞了，最后一天都得在台南往台北的路上了，这个也是怪我吧，对这个事情太不上心了，辛苦何珊珊了，以后得多担待，负起责任来。这一天做陈师傅夫妇的车从台南经过台中去日月潭玩两小时，然后再赶往台北的飞机，告别台湾之旅。陈妈妈十分的慈祥，跟我们聊很多人生的话题，她是个基督信徒，待人十分的和善可亲。去到台中的日月潭，我们坐游艇一站式介绍这个经典的景点，中途吃了好多美食。也辛苦陈师傅夫妇了。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052923.jpg?imageView2/2/w/400/q/90" alt="日月潭阿贝"><br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052924.jpg?imageView2/2/w/400/q/90" alt="告别台湾"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这趟意义非凡的旅程，让我走过很多的路，见过很多的人，领略很多的风景。台湾，我们还会再见!大爱垦丁，大爱美食！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在才来整理一下上年跨年之旅，台湾Trip。生活的东西确实需要不断的及时整理，及时思考。我们是从2016-01-29的时候出发的，01-07回港，持续了10天左右，这趟旅程收获了很多台湾美食，风景以及同行真挚的小伙伴。</p>
<h2 id="台北"><a href="#台北" class="headerlink" title="台北"></a>台北</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>因为大家都是临近第一个学期的期末，所以对于攻略方便的功课确实做得不够好。旅程一共四个小伙伴，我和宝宝还有静静和WINDY。大家各自带好的行李，出发在香港国际机场集合去，我们太蠢直接从地铁过去，每个人要98HKD的样子机场跨线，殊不知做巴士好像也才30HKD，时间是差不多的！上机前还担心肚子饿，吃了个M记，不过觉得香港的M记还真不错。<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052901.jpg?imageView2/2/w/400/q/90" alt="机票"><br>四位同伴就此结识并开始上路了！第一次来到了香港国际机场，整个航班的设施和服务都是很到位的，顺带带宝宝第一次坐了灰机。（有如过山车般的好玩吧）<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/taiwan052902.jpg?imageView2/2/w/400/q/90" alt="香港航空合照"><br>落地后，我们果断打车前往珊珊大人选的西门町住处，离捷运和地铁、景点商圈都很近，十分的赞！遗憾的是，我们还没买跨年去台南的票，而且我们因为价格太贵，没有订住处。所以悲催的在那边弄这个本应该攻略弄好的事，也只能怪台北跨年人太多了，各种挤，中途还找科长借了他女朋友家的车钥匙放行李，在上面躺了半个晚上，真是够凄惨的。（这是后话）台湾的民宿确实便宜呢，消费也不高，适合去旅行。放下行李我们出去西门町的小夜市吃小吃，这是当晚饭了，台湾基本晚饭就是小吃吃的，不然不够肚子用！吃了个火烤牛肉，还有鸡肉肠（她们都说好吃，我是没怎么吃到)。吃完逛了一会，回到去还要帮珊爷写Dissertation Proposal,我的天哪，我旅游的时间都用来做了什么。睡觉？买车票？写Proposal?.<br>]]>
    
    </summary>
    
      <category term="旅游 台湾" scheme="https://csrjtan.github.io/tags/%E6%97%85%E6%B8%B8-%E5%8F%B0%E6%B9%BE/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Summary_Of_Half_Year]]></title>
    <link href="https://csrjtan.github.io/2016/02/29/Summary-Of-Half-Year/"/>
    <id>https://csrjtan.github.io/2016/02/29/Summary-Of-Half-Year/</id>
    <published>2016-02-29T03:10:23.000Z</published>
    <updated>2016-06-01T14:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>总结进入理大半年来的学习，以及关于SLAM和无人机室内定位飞行项目的学习</p>
<p>这个项目比想象中大，里面需要学习和解决的问题都很多，一下子都无从下手，复杂度也高，以下写一下OnBoard<br>AutoNavigation and Obstacle Avoidance的问题和见解<a id="more"></a></p>
<h3 id="关于DJI的开发套件"><a href="#关于DJI的开发套件" class="headerlink" title="关于DJI的开发套件"></a>关于DJI的开发套件</h3><p>首先用的是GUIDACNE和Matrix100以及树莓派pi2，对于完全没有硬件概念的我，接触到单片机真是头疼，硬件和软件是完全的两码事。Guidance是个多源的视觉素材采集设备，多方位的双目超声以及IMU模块，可以提取出大量有用的环境信息，加工进而智能优化使用。而M100是通过对应的命令传输指令进行控制的，这里的信号对于传输频率有一些注意，比如波段这些都是比较基础底层的东西。最头疼的是遇到这些套件的学习使用不方便，M100也不适应室内的飞行，指南针校准。曾经遇到指南针损坏需要焊接电路，遇到IMU侧准不稳导致起飞折断螺旋桨，遇到系统不兼容树莓派的移植问题，遇到SLAM精度不够无法恢复的问题，也在一步一个脚印不断尝试去解决，便知道除了编程，还有很多很多的问题是复杂而难解决的，如何解决或者如何避开问题都是能力的体现</p>
<h3 id="关于OnBoard-System"><a href="#关于OnBoard-System" class="headerlink" title="关于OnBoard System"></a>关于OnBoard System</h3><p>至此，整个system已经很大，感觉需要公司提供解决方案了，已经不是一个人hold住了，所以把Vision<br>System里面的SLAM部分抽出来学习，希望能从中挖出一些点子，看了RGBD<br>SLAM以及里面的一些核心问题，跟很多国内的研究者去讨论，看英文材料，包括那本Multi-View的经典，还有很多工具框架和素材库，POINT<br>CLOUD LIBRARY, OPENCV,<br>ROS.进而发现，每一个点都是很大，都不好挖。结果整个人的心态就不行了，发现自己在做一个不能完成的任务的感觉，应该果断将问题抛出，让大家一起有效来解决。另外还是希望可以有学习的对象，有讨论的人，有相关一起工作的伙伴是一件很值得珍惜的事情。</p>
<h3 id="极简的生活"><a href="#极简的生活" class="headerlink" title="极简的生活"></a>极简的生活</h3><p>最后，总结一下失败的经验和收获的东西。很感谢处在一个自由向上的科研环境里，感觉自己值得学习的东西还是很多很多，但希望自己能真正定下心来挖掘。了解和知道自己所想所要的，开启一个极简的生活状态，发现自己很懒，记忆也不好。每天需要提醒自己，鸡汤喝完就忘，只有习惯才是永存的好东西，以及自己的能力和素质。保持良好的工作态度和心态，然后坚持去做值得自己去做的事情，包括锻炼、看书和音乐，想要去做的东西就尽力去做，不要计较得失，不要在乎难度，一点一点安排计划就不是问题了。整理掉不要看到的东西，不然影响自己，了解真正需要的并保留下来，不要再去学习相似而没有意义是事情。接下来就开启新的生活吧，整理关于SLAM的东西，爱CV看多光谱，学习ML,PR！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总结进入理大半年来的学习，以及关于SLAM和无人机室内定位飞行项目的学习</p>
<p>这个项目比想象中大，里面需要学习和解决的问题都很多，一下子都无从下手，复杂度也高，以下写一下OnBoard<br>AutoNavigation and Obstacle Avoidance的问题和见解]]>
    
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode26 & 242 & String]]></title>
    <link href="https://csrjtan.github.io/2016/02/26/leetcode26/"/>
    <id>https://csrjtan.github.io/2016/02/26/leetcode26/</id>
    <published>2016-02-26T09:39:19.000Z</published>
    <updated>2016-06-01T14:52:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="leetcode-26"><a href="#leetcode-26" class="headerlink" title="leetcode 26"></a>leetcode 26</h3><p>Remove Duplicates from Sorted Array<br>思路：去除有序数组中的重复点，返回新数组长度，前n个就是新数组。难点是不能用额外空间<br><a id="more"></a><br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> removeDuplicates(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="keyword">size</span>();i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(i==<span class="number">0</span>||nums[i]!=nums[i-<span class="number">1</span>])</span><br><span class="line">           &#123;</span><br><span class="line">               nums[<span class="keyword">count</span>] = nums[i];</span><br><span class="line">               <span class="keyword">count</span>++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>解题：重新填入整个数组，如果是0或者与前一个值不一样，就直接填入覆盖，直到遍历完整个有序数组。<br>TC = O(n), SC = O(1)</p>
<p>今天还完成了<a href="http://pan.baidu.com/s/1o7o6xYy" target="_blank" rel="external">Thesis Writting<br>Collacation</a> 密码：8qjh</p>
<p>以及<a href="http://pan.baidu.com/s/1i4t00SX" target="_blank" rel="external">DJI PPT</a> 密码：awzd</p>
<h3 id="leetcode-242-Valid-Anagram"><a href="#leetcode-242-Valid-Anagram" class="headerlink" title="leetcode 242 Valid Anagram"></a>leetcode 242 Valid Anagram</h3><p>题目：判断两个字符串是否为同字母异序<br>思路：1.将字符串转成数组，排序然后比对得到结果<br>      2.计算两个字符串里面的字母的Occurence，用一个26大小的counter数组统计字母出现的次数，当第一个串出现就++，第二个出现就–；最后得到的counter如果全为0，则符合；否则不符合。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; counter;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           counter.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            counter[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">            counter[t[i] - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(counter[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>3.或者先对第一个串加完，然后第二个串减counter,如果其中一个元素小于0，则不符合。不能说一定等于0，因为后面可能会继续减的。</p>
<h3 id="c-string用法"><a href="#c-string用法" class="headerlink" title="c++ string用法"></a>c++ string用法</h3><p>1.头文件 #include <string><br>2.构造 string(const char <em>s) //c string initialize<br>       string(int n,char c)<br>       string s = “hello”;<br>3.字符操作  const char &amp;operator<a href="int n"></a> const<br>        int copy(char </em>s,int n, int pos=2) const;<br>4.特性  int length() const;<br>        bool empty() const;<br>       void resize(int len,char c); //不足部分用c填充<br>5.赋值  = , assign(const char <em>c)<br>6.连接  +=, string append(const string&amp;s);<br>7.比较 ==， int compare(const string &amp;s);<br>8.子串  string substr(int pos=0,int n=npos) const;<br>9.交换  void swap(string &amp;s2);<br>10.查找函数 int find(char c,int pos=0) const; //从pos开始找c<br>       int find(const string &amp;s,int pos=0) const; //从pos找s<br>11.替换  string &amp;replace(int p0,int n0,const char
</em>s);//删除p0开始n0个字符，在p0后插入串s<br>12.插入删除 insert erase</string></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="leetcode-26"><a href="#leetcode-26" class="headerlink" title="leetcode 26"></a>leetcode 26</h3><p>Remove Duplicates from Sorted Array<br>思路：去除有序数组中的重复点，返回新数组长度，前n个就是新数组。难点是不能用额外空间<br>]]>
    
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[leetcode1 with Vecotr and Map]]></title>
    <link href="https://csrjtan.github.io/2016/02/26/leetcode1/"/>
    <id>https://csrjtan.github.io/2016/02/26/leetcode1/</id>
    <published>2016-02-26T06:08:03.000Z</published>
    <updated>2016-06-01T14:50:44.000Z</updated>
    <content type="html"><![CDATA[<p>In order to practise the c++ coding ability and have a prepare for the<br>work interview for the future.I start to do the leetcode in the<br>leisure time.Before that I introduce a code comparing tools: <strong>Beyond<br>Compare </strong></p>
<h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p><a href="http://www.scootersoftware.com/index.php" target="_blank" rel="external">Home Page</a><br>It is a tool for folder and file comparing, which useful for coding<br>compare as well. For now, it provides all the OS version including<br>WINDOWS, LINUX and MAC.</p>
<h3 id="LeetCode1-Two-Sum"><a href="#LeetCode1-Two-Sum" class="headerlink" title="LeetCode1 Two Sum"></a>LeetCode1 Two Sum</h3><p><strong>Ques</strong>:Given an array of integers, return indices of the two numbers such<br>that they add up to a specific target.<br>You may assume that each input would have exactly one solution.<a id="more"></a><br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Example</span>:</span><br><span class="line"><span class="symbol">Given</span> nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"><span class="symbol">Because</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line">return [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure></p>
<h4 id="Solution1-Sort-and-Search"><a href="#Solution1-Sort-and-Search" class="headerlink" title="Solution1: Sort and Search"></a>Solution1: Sort and Search</h4><p>先排序，从开头和结尾向中间找，复杂度O(nlogn)<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义Node来重新装数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="keyword">int</span> id,val;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">// 定义Node比较大小的原则，让sort从小到大排序</span></span><br><span class="line"><span class="keyword">bool</span> compare(<span class="keyword">const</span> Node &amp; a,<span class="keyword">const</span> Node &amp; b)&#123;</span><br><span class="line">    <span class="built_in">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; twoSum(vector&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 初始化Nodes列表</span></span><br><span class="line">        Node nodes[numbers.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="built_in">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            nodes[i].id = i+<span class="number">1</span>;</span><br><span class="line">            nodes[i].val = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序后，有序地检索</span></span><br><span class="line">        sort(nodes, nodes+numbers.<span class="built_in">size</span>(), compare);</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>,<span class="built_in">end</span>=numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="comment">// 从两端往中间去搜索</span></span><br><span class="line">        <span class="built_in">while</span>(start &lt; <span class="built_in">end</span>)&#123;</span><br><span class="line">            <span class="comment">// 找到后，按序输出</span></span><br><span class="line">            <span class="built_in">if</span>(nodes[start].val + nodes[<span class="built_in">end</span>].val == target)&#123;</span><br><span class="line">                <span class="built_in">if</span>(nodes[start].id &gt; nodes[<span class="built_in">end</span>].id)</span><br><span class="line">                    swap(nodes[start].id , nodes[<span class="built_in">end</span>].id);</span><br><span class="line">                ans.push_back(nodes[start].id);</span><br><span class="line">                ans.push_back(nodes[<span class="built_in">end</span>].id);</span><br><span class="line">                <span class="built_in">return</span> ans;</span><br><span class="line">            <span class="comment">// 过小:start++; 过大:end--</span></span><br><span class="line">            &#125;<span class="built_in">else</span> <span class="built_in">if</span>( nodes[start].val + nodes[<span class="built_in">end</span>].val &lt; target )&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;<span class="built_in">else</span></span><br><span class="line">                <span class="built_in">end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="Solution2-利用map-find"><a href="#Solution2-利用map-find" class="headerlink" title="Solution2: 利用map.find"></a>Solution2: 利用map.find</h4><p>将数存入hash_map中，查找target-numbers[i],有即返回。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> length = numbers.size();</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> find;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; length; ++i)&#123;</span><br><span class="line">        find = mp[target-numbers[i]];</span><br><span class="line">        <span class="comment">// 默认没的时候，初始化map,直到新加数据找到以往符合的值</span></span><br><span class="line">        <span class="keyword">if</span>(find)&#123;</span><br><span class="line">            res.push_back(find);</span><br><span class="line">            res.push_back(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[numbers[i]] = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总体而言，第二种方法假定了只有一种结果，先判断找到没，再初始化map。这样可以确保找到的索引值是在前的，在新插的数据索引是在后的。十分的巧妙在一边在检索结果一边初始化map的数据。</p>
<p>参考链接: <a href="http://www.acmerblog.com/leetcode-two-sum-5223.html" target="_blank" rel="external">acm之家</a></p>
<h3 id="c-Vector用法"><a href="#c-Vector用法" class="headerlink" title="c++ Vector用法"></a>c++ Vector用法</h3><p>1.头文件 #include <vector><br>2.变量声明 vector<int> a;  二维数组： vector<int*> a2;<br>3.具体用法<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">a<span class="selector-class">.push_back</span>(int)     <span class="selector-tag">pop_back</span>()    <span class="selector-tag">begin</span>()  <span class="selector-tag">end</span>()  <span class="selector-tag">max_size</span>() <span class="selector-tag">size</span>()</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.at</span>(<span class="number">5</span>) <span class="selector-tag">a</span><span class="selector-attr">[5]</span>  <span class="selector-tag">if</span>(a.empty())   <span class="selector-tag">clear</span>()  <span class="selector-tag">a</span><span class="selector-class">.insert</span>(pos,elem)</span><br></pre></td></tr></table></figure></int*></int></vector></p>
<p>4.自定义排序<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> comp(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a,<span class="keyword">const</span> <span class="keyword">int</span>&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line">调用sort(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),comp);</span><br></pre></td></tr></table></figure></p>
<p>5.Vector使用分析<br>一般不够大小会自动resize扩大两倍的容量，所以如果装入1000个元素，会自动重新分配10次，2^10.但如果用reserve(1000)的话，可以有效避免重新分配的消耗。<br>另外可以用swap来有效利用vector剩余的空间等。</p>
<p>参考链接： <a href="http://blog.csdn.net/hancunai0017/article/details/7032383" target="_blank" rel="external">vecotr用法详解</a></p>
<h3 id="c-map的用法"><a href="#c-map的用法" class="headerlink" title="c++ map的用法"></a>c++ map的用法</h3><p>STL中一对一的数据结构，第一个成为关键字，只能出现一次，第二个是其值。Key-Value<br>其内建组织是一颗红黑树（非严格定义的平衡二叉树），可以对数据自动排序。<br>1.头文件 #include <map><br>2.声明  Map<int,string> mapStudent<br>3.数据插入<br>  3.1 mapStudent.insert(pair<int,string>(1,”stu_1”));<br>  3.2 mapStudent.insert(map<int,string>::value_type(2,”stu_2”));<br>  3.3 mapStudent[3] = “stu_3”;<br>  前两种一样，如果key已存在则插入失败；数组的方式是可以覆盖已有key-value的<br>4.如何检查插入成功<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Map&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; mapStudent;</span><br><span class="line">Pair&lt;<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::iterator,<span class="keyword">bool</span>&gt; Insert_Pair;</span><br><span class="line">Insert_Pair = mapStudent.insert(pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(<span class="number">1</span>,<span class="string">"stu_1"</span>));</span><br><span class="line"><span class="keyword">if</span>(Insert_Pair.second==<span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Insert Suceess!"</span>;</span><br></pre></td></tr></table></figure></int,string></int,string></int,string></map></p>
<p>所以我们知道map.insert返回的属性是pair(iterator,bool)<br>5.size()，数据遍历<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示一下反向迭代器</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::reverse_iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mapStudent.rbegin();iter!=mapStudent.rend();iter++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;iter-&gt;second&lt;&lt;end;</span><br></pre></td></tr></table></figure></p>
<p>6.数据查找<br> 6.1 count判断关键字是否出现，是1，否0.<br> 6.2 find,返回一个迭代器，没有则返回end函数迭代器<br> 6.3<br>7.判空empty()和清空clear()<br>以及其他swap,key_comp,value_comp,get_allocator等函数<br>8.数据删除<br>  map.erase(iter) map.erase(key)<br>  map.erase(begin(),end()) //成片删除，前开后闭<br>9.如果key上用自己的结构体，需要重载小于号&lt;,不然无法遍历iterator</p>
<p>参考链接: <a href="http://blog.csdn.net/bat603/article/details/1456141" target="_blank" rel="external">STL中map的用法详解</a></p>
<h3 id="官方给出解法"><a href="#官方给出解法" class="headerlink" title="官方给出解法"></a>官方给出解法</h3><h4 id="AP-1"><a href="#AP-1" class="headerlink" title="AP 1"></a>AP 1</h4><p>Brute Force 暴力破解,复杂度为 TC=O(N^2),SC=O(1)<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="comment">//分别遍历，找是否存在该值</span></span><br><span class="line">            <span class="keyword">if</span> (nums[j] == <span class="keyword">target</span> - nums[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="AP-2"><a href="#AP-2" class="headerlink" title="AP 2"></a>AP 2</h4><p>利用Hash Table，遍历两次,复杂度 TC=O(N),SC=O(1)<br>将元素插入hash_map中，直接使用map.containsKey寻找映射值匹配<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="comment">//利用hash_map的找，这是STL的优化</span></span><br><span class="line">        <span class="built_in">if</span> (<span class="built_in">map</span>.containsKey(complement) &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(complement) != i) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, <span class="built_in">map</span>.<span class="built_in">get</span>(complement) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="AP-3"><a href="#AP-3" class="headerlink" title="AP 3"></a>AP 3</h4><p>用Hash Table进一步优化，一边插入一边求解，达到一次遍历</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//边插入hash_map,边找是否存在该key</span></span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="built_in">if</span> (<span class="built_in">map</span>.containsKey(complement)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="built_in">map</span>.<span class="built_in">get</span>(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>In order to practise the c++ coding ability and have a prepare for the<br>work interview for the future.I start to do the leetcode in the<br>leisure time.Before that I introduce a code comparing tools: <strong>Beyond<br>Compare </strong></p>
<h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p><a href="http://www.scootersoftware.com/index.php">Home Page</a><br>It is a tool for folder and file comparing, which useful for coding<br>compare as well. For now, it provides all the OS version including<br>WINDOWS, LINUX and MAC.</p>
<h3 id="LeetCode1-Two-Sum"><a href="#LeetCode1-Two-Sum" class="headerlink" title="LeetCode1 Two Sum"></a>LeetCode1 Two Sum</h3><p><strong>Ques</strong>:Given an array of integers, return indices of the two numbers such<br>that they add up to a specific target.<br>You may assume that each input would have exactly one solution.]]>
    
    </summary>
    
      <category term="leetcode" scheme="https://csrjtan.github.io/tags/leetcode/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim Manual学习]]></title>
    <link href="https://csrjtan.github.io/2016/02/18/Manual%E5%AD%A6%E4%B9%A0/"/>
    <id>https://csrjtan.github.io/2016/02/18/Manual学习/</id>
    <published>2016-02-18T08:48:13.000Z</published>
    <updated>2016-06-01T14:51:14.000Z</updated>
    <content type="html"><![CDATA[<p>The meaning of life is challenging yourself constantly.<br>在工具上磨刀耗费了不少的时间，是时候提升个人能力和领域知识，积累和效率同样重要。</p>
<h3 id="从Sublime转用VIM作为编辑器"><a href="#从Sublime转用VIM作为编辑器" class="headerlink" title="从Sublime转用VIM作为编辑器"></a>从Sublime转用VIM作为编辑器</h3><p>放弃Sublime的原因主要有三：1.最主要的原因，从事无人机开发，在单片机上没有图形界面一说，所以Sublime也无法使用，通常使用ssh进行远端控制和开发，而且使用VIM有助于远距离开发，只从命令行便完成一切控制任务 2.真正解放鼠标，而且具有完备的教程和社区，相信如果一生与编程为伴的我会感谢现在的我所作出的决定 3.真正意义上从习惯以及Linux使用者的角度去理解Linux，可以加深和了解很多关于Shell的用法，以及约定俗成的用户习惯<br><a id="more"></a></p>
<h3 id="VIM的快捷键图"><a href="#VIM的快捷键图" class="headerlink" title="VIM的快捷键图"></a>VIM的快捷键图</h3><p>这里放上VIM的经典快捷键图，感谢博主原文链接<a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/" target="_blank" rel="external">CENALULU</a><br>附带一个清晰的快捷键链接<a href="http://vim.rtorr.com/" target="_blank" rel="external">站点</a><br>经典版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/classic.gif" alt="classic"><br>入门版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/entry.png" alt="freshman"><br>进阶版<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/advanced.png" alt="advance"></p>
<h3 id="阅读Manual的快捷键Remind总结"><a href="#阅读Manual的快捷键Remind总结" class="headerlink" title="阅读Manual的快捷键Remind总结"></a>阅读Manual的快捷键Remind总结</h3><h4 id="前12节"><a href="#前12节" class="headerlink" title="前12节"></a>前12节</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>左下上右：hjkl</td>
<td>删改:x d c D C s S r R</td>
<td>查找:F f T t / ?</td>
</tr>
<tr>
<td>快速位移：gg G [Num]G [Num]% H M L zz</td>
<td>复制黏贴：y Y p P</td>
<td>寄存器复制:”[a-z]Y</td>
</tr>
<tr>
<td>对应补粘：”[A-Z]Y</td>
<td>模式：i a o q(record)  R(replace) v(visual) ctrl+v(coloum visual)</td>
<td>范围改动: :[range]s/from/to[gc] \n   :global/place/{cmd}</td>
</tr>
<tr>
<td>排版:gq</td>
<td>大小写:~ guu gUU g~~</td>
<td>多文件:vim -o   vsplit ctrl+w :edit :read :write</td>
</tr>
<tr>
<td>标记:m[a-z]</td>
<td>跳转: ‘[a-z] 和 `.</td>
<td>单词统计：g CTRL-G</td>
</tr>
</tbody>
</table>
<p>单词替换: :%s/\&lt;four\&gt;/4/gc<br>多个文件替换单词(记录-回放)：1.vim *.cpp 2.qq :%s/\&lt;GetResp\&gt;/GetAnswer/g 3.:wnext 4.q 5.999@q<br>使用man查询: K  1.:runtime! ftplugin/man.vim  2.:Man csh </p>
<p>至此，阅读了usr_01 ~ usr_12.txt,下一节继续学习余下部分。</p>
<h4 id="余下部分"><a href="#余下部分" class="headerlink" title="余下部分"></a>余下部分</h4><p>usr_20 命令行：<br>命令行状态，左移一个单词：Shift+Left 或 Ctrl+Left ，删除单词:Ctrl-w ,删除全部文字：Ctrl-u.<br>“:”命令通常具有缩写，但对应只有一个命令，可查看帮助以便记忆使用<br>Tab自动补全，Ctrl+p返回补全上一个选项，Ctrl+d可以显示目录候选文件<br>q: 进入命令行窗口，进行修改历史命令并执行;  用:！执行shell命令</p>
<p>usr_21 记录和会话（没大懂，回头看）：<br>关于viminfo存储状态信息以及重返VIM中断处:oldfilesi<br>关于会话session,主要用于建立自定义窗口布局</p>
<p>usr_22 编辑指定文件<br>:pwd :cd  查找文件gf 加入头文件目录:set path+=~/proj/include<br>find 缓冲区列表 :hidden :bnext :bfirst :bdelete [Num]</p>
<p>usr_23 编辑其他文件<br>识别文件类型:set fileformat<br>加密：vim -x filename 撤销密码:set key=<br>读取二进制文件： vim -b filename<br>字节位置: g Ctrl+g</p>
<p>usr_24 快速插入<br>更正： Ctrl+w  Ctrl+u<br>补全： Ctrl+p  Ctrl+n<br>从下列文件搜索补全词：1.当前文件 2.其他窗口文件 3.其他载入文件（隐藏缓冲区） 4.未载入文件（非激活缓冲区） 5.标签文件 6.被当前文件以#include语句包含的所有头文件<br>可以用’complete’调整搜索顺序，用‘ignorecase’忽略大小写<br>输入上次编辑模式的内容：Ctrl+a<br>逐个重复输入上一行的字符：Ctrl+y  Ctrl+e(下方)<br>插入寄存器内容：Ctrl-r {register}<br>使用abbreviate缩写来简化输入，纠正错误:iabbreviate teh the 和:iabbrev #b /<strong>*</strong> (i表示仅输入模式有效)<br>删除缩写:unabbreviate {name} 和 :abclear<br>避免缩写再映射： :noreabbrev @a adder (防止:imap dd disk-door的干扰)<br>插入特殊字符： Ctrl-v<br>二合字母：Ctrl-k</p>
<p>usr_26 重复<br>改动多个文件： :args *.c<br>在shell脚本里使用vim， vim写了命令，用shell调用执行<br>usr_27 查找命令及模式（方便快速查找）<br>usr_28 折叠<br>zf 创建折叠  zo 打开折叠 zc 关闭折叠 zr 减少折叠数 zR 打开所有 zM 折叠所有<br>usr_29 代码间移动<br>标签 ctags -R<br>Ctrl+] 跳转   Ctrl+t 返回<br>Ctrl+w ] 切换窗口并跳转</p>
<h4 id="题外话，如何选书"><a href="#题外话，如何选书" class="headerlink" title="题外话，如何选书"></a>题外话，如何选书</h4><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数-&gt;著-&gt;编-&gt;参考引用-&gt;索引-&gt;不看译作-&gt;书评-&gt;牛人在读-&gt;网上内容审核<br>二合字母：Ctrl-k</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The meaning of life is challenging yourself constantly.<br>在工具上磨刀耗费了不少的时间，是时候提升个人能力和领域知识，积累和效率同样重要。</p>
<h3 id="从Sublime转用VIM作为编辑器"><a href="#从Sublime转用VIM作为编辑器" class="headerlink" title="从Sublime转用VIM作为编辑器"></a>从Sublime转用VIM作为编辑器</h3><p>放弃Sublime的原因主要有三：1.最主要的原因，从事无人机开发，在单片机上没有图形界面一说，所以Sublime也无法使用，通常使用ssh进行远端控制和开发，而且使用VIM有助于远距离开发，只从命令行便完成一切控制任务 2.真正解放鼠标，而且具有完备的教程和社区，相信如果一生与编程为伴的我会感谢现在的我所作出的决定 3.真正意义上从习惯以及Linux使用者的角度去理解Linux，可以加深和了解很多关于Shell的用法，以及约定俗成的用户习惯<br>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vision-Based State Estimation for Autonomous Rotorcraft MAVs in Complex Environments]]></title>
    <link href="https://csrjtan.github.io/2016/02/17/paper-reading-20160217/"/>
    <id>https://csrjtan.github.io/2016/02/17/paper-reading-20160217/</id>
    <published>2016-02-17T06:04:08.000Z</published>
    <updated>2016-06-01T14:51:40.000Z</updated>
    <content type="html"><![CDATA[<p>HKUST<a href="https://sites.google.com/site/eeshaojie/academic-projects" target="_blank" rel="external">沈劭劼</a>的微型无人机避障系统</p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>机载避障关键点在于低耗的传感器以及实时避障算法，该系统使用25Hz的鱼眼摄像头和一个低频的第二摄像头，外加IMU传感器fusion进行100Hz的飞行器控制<br><a id="more"></a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这里有一个有趣的软件PTAM（Parallel Tracking and Mapping），是一个基于SLAM的增强现实应用，可以去进行参考了解。论文的主要贡献点在于提供了完整的系统架构，从硬件到软件到算法，完成了机载设备的自动导航</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>1.相机标定以及特征提取跟踪<br>2.坐标系的正确转换<br>3.基于单目的Local Mapping<br>4.基于低帧率的立体匹配<br>5.误差校正和修复<br>6.UKF-Based的传感器融合（这一点可以需要的时候进行仔细的研究学习）</p>
<h3 id="实验部分"><a href="#实验部分" class="headerlink" title="实验部分"></a>实验部分</h3><p>硬件：公司购买的飞行器，使用ARM7的机载处理器，具有双核1.86GHz和2GB RAM，120GB SSD。传感器为752*480的鱼眼摄像头，以及3.5mm f1.4 1Hz的第二摄像头，MicroStrain 3DM-GX3-25 IMU,用802.11g networking，总重1.983kg.</p>
<p>软件：C++ using ROS, OpenCV,最大特征数1000，以及一些相关参数的调整，最后算法占用了50%的CPU，以及使用该算法与装有Vicon motion tracking system进行比较。</p>
<p>测试：1.算法的姿态与GT比较 2.机载定点盘旋 3.复杂环境里的自动导航</p>
<p>思路：作者主要使用ROS和OpenCV里面的工具进行系统的架构，可以去进行相关研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HKUST<a href="https://sites.google.com/site/eeshaojie/academic-projects">沈劭劼</a>的微型无人机避障系统</p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>机载避障关键点在于低耗的传感器以及实时避障算法，该系统使用25Hz的鱼眼摄像头和一个低频的第二摄像头，外加IMU传感器fusion进行100Hz的飞行器控制<br>]]>
    
    </summary>
    
      <category term="paper" scheme="https://csrjtan.github.io/tags/paper/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++_Primer_Reading2]]></title>
    <link href="https://csrjtan.github.io/2016/01/30/C-Primer-Reading2/"/>
    <id>https://csrjtan.github.io/2016/01/30/C-Primer-Reading2/</id>
    <published>2016-01-30T08:05:37.000Z</published>
    <updated>2016-06-01T14:50:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="C-的编程模块"><a href="#C-的编程模块" class="headerlink" title="C++的编程模块"></a>C++的编程模块</h3><p>这一章讲述C++的函数，其中的乐趣在于大型库（标准ANSI库）和自己编写的函数，以及提高编程效率深入学习STL和BOOST C++提供的功能。<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="function"><span class="keyword">function</span><span class="title">Name</span>(<span class="params">parameterList</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	statement(s)</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>函数中将数组地址作为参数可以节省复制数组所需的时间和内存，地址值和数组长度随系统而异<br>尽可能使用const:1.可以避免无意间修改数据导致的编程错误 2.能够同时处理const和非const的实参<br>按引用传递结构，还有函数指针的知识，C风格字符串：字符数组，字符串常量和字符串指针，以及string类.<br><br>### 函数探幽<br>内联函数、按引用传递、默认参数值、函数重载以及模板函数<br>C++新增加一种右值引用。返回引用时，避免返回函数终止则不再存在的内存单元引用<br><br>函数模板<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">template&lt;typename AnyType&gt;</span><br><span class="line">void <span class="keyword">Swap(AnyType </span>&amp;a,AnyType &amp;<span class="keyword">b)</span><br><span class="line"></span>&#123;</span><br><span class="line">	AnyType temp<span class="comment">;</span></span><br><span class="line">	temp = a<span class="comment">;</span></span><br><span class="line">	a = <span class="keyword">b;</span><br><span class="line"></span>	<span class="keyword">b </span>= temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板匹配的过程：1.创建候选函数列表 2.使用候选函数列表创建可行函数列表 3.确定是否有最佳可行函数<br>最佳到最差匹配顺序：1.完全匹配 2.提升转换 3.标准转换 4.用户定义转换</p>
<h3 id="内存模型和名称空间"><a href="#内存模型和名称空间" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h3><p>单独编译，将头文件和结构文件以及程序文件分开，头文件使用防护(guarding)方案，避免文件定义结构两次。（不同编译器创建的二进制模块很可能无法正确地链接，可以拿到源码后重新编译连接解决问题）</p>
<h4 id="存储持续性，作用域和链接性"><a href="#存储持续性，作用域和链接性" class="headerlink" title="存储持续性，作用域和链接性"></a>存储持续性，作用域和链接性</h4><p>自动存储持续性：自动默认的变量，在块内或者函数生命周期里存在<br>静态存储持续性：static定义变量在程序运行过程中都存在<br>线程存储持续性（c++11):thread_local变量生命周期与线程一样长<br>动态存储持续性：用new分配的内存，直到delete才释放</p>
<p>静态变量的三种链接性：1.外部链接性（其他文件中访问）extern 关键字表示使用外部变量。  2.内部链接性（当前文件访问） 3.无链接性（函数或块内访问）</p>
<p>组织项目策略：头文件定义用户类型，为操纵类型的函数提供原型；源代码文件放置对应函数的定义；main和调用这些函数的函数放在第三文件上。</p>
<p>为了减少命名冲突，引入了命名空间的概念，空间还能嵌套</p>
<h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><p>突出显示OOP特性：抽象；封装和数据隐藏；多态；继承以及代码的可重用性。<br>接口是共享框架，供两个系统交互时使用的。<br>类的构造函数和析构函数，列表初始化参数，this指针，枚举结构体等。</p>
<h3 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h3><p>运算符重载，友元函数，重载&lt;&lt;，状态成员，类的自动转换和强制类型转换。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName ClassName::<span class="keyword">operator</span>+ (<span class="keyword">const</span> ClassName &amp; c) <span class="keyword">const</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>重载限制：1.至少一个操作数是用户定义类型 2.使用运算符时不能违反运算符原来的句法规则 3.不能创建新运算符 4.不能重载sizeof . * :: ?: typeid const_cast static_cast 5.= () [] -&gt;只能通过成员函数进行重载 6.一般用友元重载&lt;&lt;<br>对于类的总结：相对于简单C-风格，使用类必须谨慎和小心，作为补偿，它为我们完成更多工作</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="C-的编程模块"><a href="#C-的编程模块" class="headerlink" title="C++的编程模块"></a>C++的编程模块</h3><p>这一章讲述C++的函数，其中的乐趣在于大型库（标准ANSI库）和自己编写的函数，以及提高编程效率深入学习STL和BOOST C++提供的功能。<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="function"><span class="keyword">function</span><span class="title">Name</span>(<span class="params">parameterList</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	statement(s)</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="https://csrjtan.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Read" scheme="https://csrjtan.github.io/categories/Read/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无人机项目]]></title>
    <link href="https://csrjtan.github.io/2016/01/26/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>https://csrjtan.github.io/2016/01/26/无人机项目/</id>
    <published>2016-01-26T13:29:44.000Z</published>
    <updated>2016-05-28T14:25:25.000Z</updated>
    <content type="html"><![CDATA[<p>苦苦做了几个月的项目，进展好慢，自己抗拒工程的心一直没有减退，还是自己抗拒进步，克服困难的心呢。</p>
<h3 id="关于项目的现状"><a href="#关于项目的现状" class="headerlink" title="关于项目的现状"></a>关于项目的现状</h3><p>不要畏惧麻烦和困难，用工程和代码以及实验来解决问题，问题是常有的。项目现在复杂度和硬件上遇到不少麻烦，应该尽力去克服。<br>遇到的问题：1.旋翼和妙算未到 2.完成一套基本的操作流程 3.如何有效利用guidance的数据 4.优化slam里面的误差 5.避障和跟踪算法 6.飞行器的有效起飞和控制<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV1.jpg" alt="与崇雨讨论的进展图"></p>
<h3 id="对于项目未来的构想"><a href="#对于项目未来的构想" class="headerlink" title="对于项目未来的构想"></a>对于项目未来的构想</h3><p>首先还是要热爱项目，对此充满希望，才能完善完成，首先附上现用的工具，列出接下来努力的方向和目标<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV2.png" alt="项目现状和使用技术"><br>可以看到，接下来可以对无人机的几个经典库进行有效的学习和利用，进行更强的关于理论性的学习。<a href="http://周四Dr.Li" class="test test-url" target="_blank" rel="noopener noreferrer">周四Dr.Li</a> shuai的课程，《代码大全》、《C++ Primer》、《算法导论》、《LINUX私房菜》、《OPENCV Code Book》、《统计学习方法》、《PCL学习使用》、《G2O的使用》以及SLAM相关方向的论文，但是好像有点多，所以我觉得代码和工程的能力是首当其冲，理论知识和英语的恶补也应该并驾齐驱。</p>
<h3 id="暂时对于项目的架构"><a href="#暂时对于项目的架构" class="headerlink" title="暂时对于项目的架构"></a>暂时对于项目的架构</h3><p>主要是对于算法层上的组织，这几块高效的智能操作应当如何实施<br><img src="http://7xl4js.com1.z0.glb.clouddn.com/UAV3.png" alt="无人机项目的整体架构"><br>是否可以考虑率先完成一个小的demo,进而进行某个点的深入学习研发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>苦苦做了几个月的项目，进展好慢，自己抗拒工程的心一直没有减退，还是自己抗拒进步，克服困难的心呢。</p>
<h3 id="关于项目的现状"><a href="#关于项目的现状" class="headerlink" title="关于项目的现状"></a>关于项目的现状</]]>
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Life" scheme="https://csrjtan.github.io/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟G++,MAKE和CMAKE奋斗的日子]]></title>
    <link href="https://csrjtan.github.io/2016/01/22/%E8%B7%9FG-MAKE%E5%92%8CCMAKE%E5%A5%8B%E6%96%97%E7%9A%84%E6%97%A5%E5%AD%90/"/>
    <id>https://csrjtan.github.io/2016/01/22/跟G-MAKE和CMAKE奋斗的日子/</id>
    <published>2016-01-22T13:32:29.000Z</published>
    <updated>2016-06-01T14:50:00.000Z</updated>
    <content type="html"><![CDATA[<p>很有必要认真地总结一下这三个小朋友的关系，但我可是被他们仨虐了好久，首先感谢<a href="http://blog.atime.me/note/cmake.html" target="_blank" rel="external">MWB</a>,jacker的《Cmake实践》</p>
<h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><p>现在用的是G++-4.9：</p>
<pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.9
cd /usr/bin/
sudo ln -s g++-4.9 g++ -f
sudo ln -s gcc-4.9 gcc -f
</code></pre><p>make应该有自带的，cmake就上官网下载包</p>
<pre><code>sudo make
sudo make install
</code></pre><a id="more"></a>
<h3 id="GCC-G"><a href="#GCC-G" class="headerlink" title="GCC/G++"></a>GCC/G++</h3><p>经过4步：预处理（预处理器cpp），编译(编译器egcs)，汇编(汇编器as)和链接（连接器ld）</p>
<pre><code>//预处理
gcc -E test.c -o test.i   //i文件
//编译
gcc -S test.i -o test.s   //s文件
//汇编
gcc -c test.s -o test.o   //o文件
//链接
gcc test.o -o test        //bin文件
</code></pre><p>优化等级: -O -O2 -O3<br>包含头： -include  -I<br>链接库：  -l  -L<br>警告信息： -Wall 、 -w 和 -v<br>定义环境变量：D<br>(注意，通常手写链接参数很麻烦，很多库提供链接参数的程序，名字叫xxx-config，放在/usr/bin下<br>于是有了  gcc gtktest.c ‘pkg-confg gtk+ –libs –cflags’<br>–libs定义了链接需要的参数，–cflags是生成头文件包含的目录)</p>
<p>交叉编译：指本地编译其他平台执行的程序，需要另外用-L和-I来连接库和头文件</p>
<h3 id="MAKE"><a href="#MAKE" class="headerlink" title="MAKE"></a>MAKE</h3><p>基本语法<br>target : prerequisites<br>    command<br>自动推导以及文件依赖关系后面的命令：看到[.o]文件会自动把[.c]文件加入依赖项。</p>
<p>GNU的MAKE工作方式：<br>1.读入所有Makefile<br>2.读入被Include的其他makefile<br>3.初始化文件中变量<br>4.推导隐晦规则，分析所有规则<br>5.为所有目标文件创建依赖关系链<br>6.根据依赖，决定哪些目标的生成<br>7.执行生成命令</p>
<h3 id="CMAKE"><a href="#CMAKE" class="headerlink" title="CMAKE"></a>CMAKE</h3><p>(记下一些关键词)<br>CMAKE架构项目学习<br>基本用法<br>PROJECT<br>自动隐定义 PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR<br>SET(NAME VAR)<br>MESSAGE([STATUS | DEBUG] “string” var)<br>ADD_SUBDIRECTORY(folderName)<br>ADD_EXECUTABLE(targets src_lists)</p>
<p>make install<br>CMAKE有用的变量 CMAKE_INSTALL_PREFIX<br>INSTALL(FILES file_list DESTINATION folderName)<br>INSTALL(PROGRAMS .sh DESTINATION bin)<br>INSTALL(DIRECTORY doc/ DESTINATION doc)</p>
<p>生成动态和静态库<br>ADD_LIBRARY(libName [SHARED|STATIC] src_lists)<br>注意：要动态和静态库同名，先用别名生成静态库，再改别名<br>如：ADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})<br>SET_TARGET_PROPERTIES(hello_static PROPERTYES OUTPUT_NAME “hello”)</p>
<p>链接头文件和动态库<br>INCLUDE_DIRECTORIES(folderName)<br>LINK_DIRECTORIES(folderName)</p>
<p>ADD_EXECUTABLE(main ${SRC_LIST})<br>TARGET_LINK_LIBRARIES(main libNames)</p>
<p>使用CMAKE_INCLUDE_PATH的环境变量，用FIND_PATH可以轻松找到对应的头文件</p>
<h3 id="孟老师的工作介绍"><a href="#孟老师的工作介绍" class="headerlink" title="孟老师的工作介绍"></a>孟老师的工作介绍</h3><p>西安交通大学的<a href="http://www.cs.cmu.edu/~deyum/" target="_blank" rel="external">孟老师</a>数学优化和建模很厉害，给了一下内容的讲座</p>
<h4 id="Noise-Modeling-Principle"><a href="#Noise-Modeling-Principle" class="headerlink" title="Noise Modeling Principle"></a>Noise Modeling Principle</h4><p>一般ML问题$min_wL(x,\phi(w))+R(w)$<br>然后很多工作围绕正则项R(w)展开优化，L主要是$L_0 , L_1 ,L_P$<br>利用贝叶斯模型来解释，可以将噪声模型与损失函数对应起来，然后就是w和loss func迭代求解收敛，提到了使用混合高斯模型建模，有利于分离Low-rank structure数据的噪声</p>
<h4 id="Adaptive-Noise-Learning"><a href="#Adaptive-Noise-Learning" class="headerlink" title="Adaptive Noise Learning"></a>Adaptive Noise Learning</h4><p>假设数据都是Low-Rank Structure，然后进行噪声提取分离，目前用在的应用有 1.人脸去噪 2.背景提取 3.HSI去噪 接下来做一些雨雪分离，以及CT医学图像的去噪应用。</p>
<h4 id="Self-Pace-Learning"><a href="#Self-Pace-Learning" class="headerlink" title="Self-Pace Learning"></a>Self-Pace Learning</h4><p>提到了ML，Cognitive Science和Self-pace Learning的概念，主要原理是让模型学习从易到难，从而筛选掉一些难的数据不进行学习，其中很多的参数和变量应该用非监督的方法自动学习，主要围绕机器学习的方法展开，最后论证一下Self Pace Learning的一些有效性<a href="http://arxiv.org/pdf/1511.06049v1.pdf" target="_blank" rel="external">证明</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很有必要认真地总结一下这三个小朋友的关系，但我可是被他们仨虐了好久，首先感谢<a href="http://blog.atime.me/note/cmake.html">MWB</a>,jacker的《Cmake实践》</p>
<h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><p>现在用的是G++-4.9：</p>
<pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.9
cd /usr/bin/
sudo ln -s g++-4.9 g++ -f
sudo ln -s gcc-4.9 gcc -f
</code></pre><p>make应该有自带的，cmake就上官网下载包</p>
<pre><code>sudo make
sudo make install
</code></pre>]]>
    
    </summary>
    
      <category term="总结" scheme="https://csrjtan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="Tech" scheme="https://csrjtan.github.io/categories/Tech/"/>
    
  </entry>
  
</feed>
